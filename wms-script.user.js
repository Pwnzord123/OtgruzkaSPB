// ==UserScript==
// @name         WMS Container Override Enhanced - Complete with GitHub API
// @namespace    http://tampermonkey.net/
// @version      4.0
// @description  –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ WMS —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é + GitHub API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
// @author       –ñ–∏–≥–∞–ª–æ–≤ –Æ.–í.
// @match        https://wms.vseinstrumenti.ru/*
// @grant        GM_xmlhttpRequest
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_notification
// @exclude      https://claude.ai/*
// @updateURL    https://raw.githubusercontent.com/Pwnzord123/OtgruzkaSPB/main/wms-script.user.js
// @downloadURL  https://raw.githubusercontent.com/Pwnzord123/OtgruzkaSPB/main/wms-script.user.js
// @supportURL   https://github.com/Pwnzord123/OtgruzkaSPB
// ==/UserScript==

(function() {
    'use strict';

    // ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø GitHub API ==========

    const GITHUB_CONFIG = {
        owner: 'Pwnzord123',
        repo: 'OtgruzkaSPB',
        branch: 'main',
        scriptPath: 'wms-script.user.js',
        apiBase: 'https://api.github.com',
        rawBase: 'https://raw.githubusercontent.com',
        webBase: 'https://github.com'
    };

    // –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    const CURRENT_VERSION = '4.0';

    // ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø WMS ==========

    // XPath –ø—É—Ç–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
    const DIRECTION_XPATH = '/html/body/div/div/div/div[1]/main/div/div/div/div[5]/div/b[2]';
    const CONTAINER_XPATH_1 = '/html/body/div[1]/div/div/div[1]/main/div/div/div/div[4]/form/div/div[5]/div[2]/div/div/div[1]/h1';
    const CONTAINER_XPATH_2 = '/html/body/div[1]/div/div/div[1]/main/div/div/div/div[5]/div/b[1]';

    // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    let LARGE_FONT_SIZE = '100px';

    // –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
    let currentPreset = '–°—Ç–æ–ª 18';

    // –†–∞–±–æ—á–∏–µ –ø—Ä–µ—Å–µ—Ç—ã (–º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
    let userPresets = {};

    // –ü—Ä–µ—Å–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ (–í–°–¢–†–û–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï) - –ø–æ –±—É–∫–≤–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
    const TABLE_PRESETS = {
        "–°—Ç–æ–ª 12": {
            "–ü–∞—Ä–Ω–∞—Å": "–≥–∞–≤–Ω–∞",
            "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è": "2---–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è",
            "–í—Å–µ–≤–æ–ª–æ–∂—Å–∫": "3---–í—Å–µ–≤–æ–ª–æ–∂—Å–∫",
            "–ö—Ä–∞—Å–Ω–æ–µ": "4---–ö—Ä–∞—Å–Ω–æ–µ –°–µ–ª–æ",
            "–û–∫—Ç—è–±—Ä—è": "5---–ì–∞—Ç—á–∏–Ω–∞ 25 –û–∫—Ç—è–±—Ä—è",
            "–õ–∞–¥–æ–∂—Å–∫–∞—è": "6---–õ–∞–¥–æ–∂—Å–∫–∞—è",
            "–í–µ—Ç–µ—Ä–∞–Ω–æ–≤": "7---–í–µ—Ç–µ—Ä–∞–Ω–æ–≤",
            "–ë–∞–±—É—à–∫–∏–Ω–∞": "8---–ë–∞–±—É—à–∫–∏–Ω–∞",
            "–ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è": "9---–ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –¥.72",
            "–ë–æ–ª—å—à–µ–≤–∏–∫–æ–≤": "10---–ë–æ–ª—å—à–µ–≤–∏–∫–æ–≤",
            "–°–æ–ª–Ω–µ—á–Ω—ã–π": "11---–°–æ–ª–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥",
            "–î–µ–≤—è—Ç–∫–∏–Ω–æ": "12---–î–µ–≤—è—Ç–∫–∏–Ω–æ",
            "–¢–µ–ª—å–º–∞–Ω–∞": "13---–¢–µ–ª—å–º–∞–Ω–∞",
            "–°–≤–µ—Ä–¥–ª–æ–≤–∞": "14---–°–≤–µ—Ä–¥–ª–æ–≤–∞",
            "–ë—É–≥—Ä—ã": "15---–ë—É–≥—Ä—ã",
            "–ü–æ–ø–æ–≤–∞": "16---–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –ü–æ–ø–æ–≤–∞",
            "–ù–∏–∫–æ–ª—å—Å–∫–æ–µ": "17---–ù–∏–∫–æ–ª—å—Å–∫–æ–µ"
        },
        "–°—Ç–æ–ª 14": {
            "–û–±–æ—Ä–æ–Ω—ã": "1---–û–±—É—Ö–æ–≤—Å–∫–æ–π –û–±–æ—Ä–æ–Ω—ã",
            "–ù–æ–≤–æ—Å–µ–ª—å–µ": "2---–ù–æ–≤–æ—Å–µ–ª—å–µ",
            "–†—ã–±–∞—Ü–∫–æ–µ": "3---–†—ã–±–∞—Ü–∫–æ–µ",
            "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è": "4---–ú–æ—Å–∫–æ–≤—Å–∫–∞—è",
            "–ë–æ—Ä–æ–≤–∞—è": "5---–ë–æ—Ä–æ–≤–∞—è",
            "–ú—É–∂–µ—Å—Ç–≤–∞": "6---–ü–ª–æ—â–∞–¥—å –ú—É–∂–µ—Å—Ç–≤–∞",
            "–†–µ–≤–æ–ª—é—Ü–∏–∏": "7---–®–æ—Å—Å–µ –†–µ–≤–æ–ª—é—Ü–∏–∏",
            "–î–µ—Å–∞–Ω—Ç–Ω–∏–∫–æ–≤": "8---–î–µ—Å–∞–Ω—Ç–Ω–∏–∫–æ–≤",
            "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è": "9---–õ–æ–º–æ–Ω–æ—Å–æ–≤ –®–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è",
            "–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç": "10---–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç",
            "–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π": "11---–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π –¥.55",
            "–°–ª–∞–≤—è–Ω–∫–∞": "12---–°–ª–∞–≤—è–Ω–∫–∞",
            "–ö—É–∑–Ω–µ—Ü–æ–≤—Å–∫–∞—è": "13---–ö—É–∑–Ω–µ—Ü–æ–≤—Å–∫–∞—è",
            "–ö—É–∑—å–º–æ–ª–æ–≤—Å–∫–∏–π": "14---–ö—É–∑—å–º–æ–ª–æ–≤—Å–∫–∏–π",
            "–ë–æ–≥–∞—Ç—ã—Ä—Å–∫–∏–π": "15---–ë–æ–≥–∞—Ç—ã—Ä—Å–∫–∏–π",
            "–ú—É—Ä–º–∞–Ω—Å–∫–æ–µ": "16---–ú—É—Ä–º–∞–Ω—Å–∫–æ–µ –®–æ—Å—Å–µ",
            "–ü–∞—Ä–∞—à—é—Ç–Ω–∞—è": "17---–ü–∞—Ä–∞—à—é—Ç–Ω–∞—è",
            "–Æ–∂–Ω–æ–µ —à–æ—Å—Å–µ": "18---–Æ–∂–Ω–æ–µ –®–æ—Å—Å–µ",
            "–ú–µ–±–µ–ª—å–Ω–∞—è": "19---–ú–µ–±–µ–ª—å–Ω–∞—è"
        },
        "–°—Ç–æ–ª 16": {
            "–≠–Ω–≥–µ–ª—å—Å–∞": "1---–≠–Ω–≥–µ–ª—å—Å–∞ –¥.70",
            "–¢–∞–ª–ª–∏–Ω—Å–∫–æ–µ": "2---–¢–∞–ª–ª–∏–Ω—Å–∫–æ–µ –®–æ—Å—Å–µ",
            "–Ø–Ω–∏–Ω–æ": "3---–Ø–Ω–∏–Ω–æ",
            "–¢–≤–µ—Ä—Å–∫–∞—è": "4---–ö–æ–ª–ø–∏–Ω–æ –¢–≤–µ—Ä—Å–∫–∞—è",
            "–ë–ª–∞–≥–æ–¥–∞—Ç–Ω–∞—è": "5---–ë–ª–∞–≥–æ–¥–∞—Ç–Ω–∞—è",
            "–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è": "6---–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è",
            "–ö–æ–ª–ø–∏–Ω–æ –õ–µ–Ω–∏–Ω–∞": "7---–ö–æ–ª–ø–∏–Ω–æ –õ–µ–Ω–∏–Ω–∞",
            "–ö—Ä–∞—Å–Ω–æ–ø—É—Ç–∏–ª–æ–≤—Å–∫–∞—è": "8---–ö—Ä–∞—Å–Ω–æ–ø—É—Ç–∏–ª–æ–≤—Å–∫–∞—è",
            "–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è": "9---–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è",
            "–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π": "10---–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π",
            "–ù–∞—Ä–æ–¥–Ω–∞—è": "11---–ù–∞—Ä–æ–¥–Ω–∞—è",
            "–ß–µ—Ä–Ω–∏–≥–æ–≤—Å–∫–∞—è": "12---–ß–µ—Ä–Ω–∏–≥–æ–≤—Å–∫–∞—è",
            "–°–µ—Ä—Ç–æ–ª–æ–≤–æ": "13---–°–µ—Ä—Ç–æ–ª–æ–≤–æ",
            "–ó–≤–µ—Ä–µ–≤–æ–π": "14---–ì–∞—Ç—á–∏–Ω–∞ –ó–≤–µ—Ä–µ–≤–æ–π-–ö–Ω—ã—à–∞",
            "–ö—É–±–∏–Ω—Å–∫–∞—è": "15---–ö—É–±–∏–Ω—Å–∫–∞—è",
            "–ó–µ–ª–µ–Ω–æ–≥–æ—Ä—Å–∫": "16---–ó–µ–ª–µ–Ω–æ–≥–æ—Ä—Å–∫",
            "–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∏–π": "17---–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∏–π",
            "–ö—É–±–∞—Ç—É—Ä–∞": "18---–ö—É–±–∞—Ç—É—Ä–∞"
        },
        "–°—Ç–æ–ª 18": {
            "–°—Ç–∞—á–µ–∫": "1---–°—Ç–∞—á–µ–∫",
            "–î—ã–±–µ–Ω–∫–æ": "2---–î—ã–±–µ–Ω–∫–æ",
            "–õ–µ–Ω–∏–Ω—Å–∫–∏–π": "3---–õ–µ–Ω–∏–Ω—Å–∫–∏–π",
            "–í—ã–±–æ—Ä–≥—Å–∫–∞—è": "4---–í—ã–±–æ—Ä–≥—Å–∫–∞—è",
            "–ö–∏—Ä–æ–≤—Å–∫": "5---–ö–∏—Ä–æ–≤—Å–∫",
            "–ü—É—à–∫–∏–Ω-": "6---–ü—É—à–∫–∏–Ω",
            "–û–ø—Ç–∏–∫–æ–≤": "7---–û–ø—Ç–∏–∫–æ–≤",
            "–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∞—è": "8---–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∞—è",
            "–ü–∏—Å–∫–∞—Ä—ë–≤–∫–∞": "9---–ü–∏—Å–∫–∞—Ä–µ–≤–∫–∞",
            "–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∏–π": "10---–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∏–π",
            "–ù–∞—Ä–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç": "11---–ù–∞—Ä–≤—Å–∫–∏–π",
            "–ì–∞—Ç—á–∏–Ω–∞": "12---–ì–∞—Ç—á–∏–Ω–∞ –ü—É—à–∫–∏–Ω—Å–∫–æ–µ",
            "–°–ª–∞–≤—ã": "13---–°–ª–∞–≤—ã",
            "–≠–Ω–≥–µ–ª—å—Å–∞": "14---–≠–Ω–≥–µ–ª—å—Å–∞ –¥.133",
            "–í—Å–µ–≤–æ–ª–æ–∂—Å–∫ –ö—Ä—ã–º—Å–∫–∞—è": "15---–í—Å–µ–≤–æ–ª–æ–∂—Å–∫ –ö—Ä—ã–º—Å–∫–∞—è",
            "–ö–æ–º–º—É–Ω–∞—Ä": "16---–ö–æ–º–º—É–Ω–∞—Ä",
            "–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ": "17---–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ",
            "–ü–æ—Ç–∞–ø–æ–≤–∞": "18---–ü–æ—Ç–∞–ø–æ–≤–∞",
            "–í—ã–±–æ—Ä–≥—Å–∫–æ–µ": "19---–í—ã–±–æ—Ä–≥—Å–∫–æ–µ —à–æ—Å—Å–µ"
        },
        "–°—Ç–æ–ª 20": {
            "–ë–∞–ª—Ç–∏–π—Å–∫–∏–π": "1---–ë–∞–ª—Ç–∏–π—Å–∫–∏–π –≤–æ–∫–∑–∞–ª",
            "–ü–æ–ª—é—Å—Ç—Ä–æ–≤—Å–∫–∏–π": "2---–ü–æ–ª—é—Å—Ç—Ä–æ–≤—Å–∫–∏–π",
            "–ö—É–ø—á–∏–Ω–æ": "3---–ö—É–ø—á–∏–Ω–æ",
            "–ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π": "4---–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π –ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π",
            "–î–≤–∏–Ω—Å–∫–∞—è": "5---–î–≤–∏–Ω—Å–∫–∞—è",
            "–§–µ–¥–æ—Ä–æ–≤—Å–∫–æ–µ": "6---–§—ë–¥–æ—Ä–æ–≤—Å–∫–æ–µ",
            "–¢–æ—Å–Ω–æ": "7---–¢–æ—Å–Ω–æ",
            "–ü–µ—Ç–µ—Ä–≥–æ—Ñ": "8---–ü–µ—Ç–µ—Ä–≥–æ—Ñ –ì–æ—Å—Ç–∏–ª–∏—Ü–∫–∞—è",
            "–ù–æ–≤–æ–µ –î–µ–≤—è—Ç–∫–∏–Ω–æ": "9---–ù–æ–≤–æ–µ –î–µ–≤—è—Ç–∫–∏–Ω–æ",
            "–ß–µ—Ä–Ω–∞—è —Ä–µ—á–∫–∞": "10---–ß–µ—Ä–Ω–∞—è —Ä–µ—á–∫–∞",
            "–ë–µ–≥–æ–≤–∞—è": "11---–ë–µ–≥–æ–≤–∞—è",
            "–°—Ç–∞—Ä–æ–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∞—è": "12---–°—Ç–∞—Ä–æ–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∞—è",
            "–ú–µ—Ç–∞–ª–ª–æ—Å—Ç—Ä–æ–π": "13---–ú–µ—Ç–∞–ª–ª–æ—Å—Ç—Ä–æ–π –°–∞–¥–æ–≤–∞—è",
            "–•—É–¥–æ–∂–Ω–∏–∫–æ–≤": "14---–•—É–¥–æ–∂–Ω–∏–∫–æ–≤",
            "–¢—Ä–∏–±—É—Ü–∞": "15---–¢—Ä–∏–±—É—Ü–∞",
            "–†–æ—â–∏–Ω–æ": "16---–†–æ—â–∏–Ω–æ –°–æ–≤–µ—Ç—Å–∫–∞—è",
            "–°—Ç—Ä–æ–π–î–≤–æ—Ä": "17---–°—Ç—Ä–æ–π–¥–≤–æ—Ä",
            "–õ–∞–Ω—Å–∫–æ–µ": "18---–õ–∞–Ω—Å–∫–æ–µ –®–æ—Å—Å–µ",
            "–ü–ª–µ—Å–µ—Ü–∫–∞—è": "19---–ü–ª–µ—Å–µ—Ü–∫–∞—è"
        }
    };

    // ========== –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ==========

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
    const CHECK_INTERVAL = 160; // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º—Å)
    const CACHE_LIFETIME = 100; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º—Å)

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let isEnabled = true;
    let normalCheckTimer = null;
    let fastCheckTimer = null;

    // –ö—ç—à —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    let cachedElements = {
        direction: null,
        container1: null,
        container2: null,
        lastUpdate: 0
    };

    // ========== GITHUB API –ö–õ–ê–°–° ==========

    class GitHubAPIUpdater {
        constructor(config) {
            this.config = config;
            this.cache = new Map();
            this.rateLimit = {
                remaining: 60,
                reset: Date.now() + 3600000,
                limit: 60
            };
        }

        // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ API
        async getFileInfo() {
            const url = `${this.config.apiBase}/repos/${this.config.owner}/${this.config.repo}/contents/${this.config.scriptPath}`;

            console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —á–µ—Ä–µ–∑ GitHub API...');

            const response = await this.makeAPIRequest(url);

            if (!response.ok) {
                throw new Error(`GitHub API error: ${response.status} - ${response.statusText}`);
            }

            const data = await response.json();
            this.updateRateLimit(response.headers);

            return {
                sha: data.sha,
                size: data.size,
                downloadUrl: data.download_url,
                content: data.content,
                encoding: data.encoding,
                lastModified: data.last_modified || new Date().toISOString()
            };
        }

        // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        async getFileContent() {
            const fileInfo = await this.getFileInfo();

            if (fileInfo.encoding === 'base64') {
                return this.decodeBase64Content(fileInfo.content);
            } else {
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞: ${fileInfo.encoding}`);
            }
        }

        // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å base64 –∫–æ–Ω—Ç–µ–Ω—Ç
        decodeBase64Content(base64Content) {
            try {
                const cleanBase64 = base64Content.replace(/\s/g, '');
                const binaryString = atob(cleanBase64);
                const bytes = new Uint8Array(binaryString.length);
                for (let i = 0; i < binaryString.length; i++) {
                    bytes[i] = binaryString.charCodeAt(i);
                }
                const decoder = new TextDecoder('utf-8');
                return decoder.decode(bytes);
            } catch (error) {
                throw new Error(`–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: ${error.message}`);
            }
        }

        // –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API
        async makeAPIRequest(url, options = {}) {
            const defaultOptions = {
                method: 'GET',
                headers: {
                    'Accept': 'application/vnd.github.v3+json',
                    'User-Agent': 'WMS-Script-Updater/4.0',
                    'Cache-Control': 'no-cache',
                    'If-None-Match': ''
                },
                cache: 'no-store',
                ...options
            };

            const separator = url.includes('?') ? '&' : '?';
            const cacheUrl = `${url}${separator}_=${Date.now()}&rand=${Math.random().toString(36).substring(7)}`;

            const response = await fetch(cacheUrl, defaultOptions);
            return response;
        }

        // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö API
        updateRateLimit(headers) {
            if (headers.get('x-ratelimit-remaining')) {
                this.rateLimit.remaining = parseInt(headers.get('x-ratelimit-remaining'));
                this.rateLimit.limit = parseInt(headers.get('x-ratelimit-limit'));
                this.rateLimit.reset = parseInt(headers.get('x-ratelimit-reset')) * 1000;
            }
            console.log(`üî¢ GitHub API –ª–∏–º–∏—Ç: ${this.rateLimit.remaining}/${this.rateLimit.limit}`);
        }

        // –°—Ä–∞–≤–Ω–∏—Ç—å –≤–µ—Ä—Å–∏–∏
        async compareVersions() {
            try {
                const content = await this.getFileContent();
                const remoteVersion = this.extractVersion(content);

                return {
                    current: CURRENT_VERSION,
                    remote: remoteVersion,
                    hasUpdate: this.isNewerVersion(remoteVersion, CURRENT_VERSION),
                    content: content
                };
            } catch (error) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π: ${error.message}`);
            }
        }

        // –ò–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞
        extractVersion(scriptContent) {
            const versionMatch = scriptContent.match(/@version\s+([\d.]+)/);
            return versionMatch ? versionMatch[1] : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–µ—Ä—Å–∏—è –±–æ–ª–µ–µ –Ω–æ–≤–æ–π
        isNewerVersion(remote, current) {
            if (remote === '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') return false;

            const remoteParts = remote.split('.').map(Number);
            const currentParts = current.split('.').map(Number);

            for (let i = 0; i < Math.max(remoteParts.length, currentParts.length); i++) {
                const r = remoteParts[i] || 0;
                const c = currentParts[i] || 0;

                if (r > c) return true;
                if (r < c) return false;
            }

            return false;
        }
    }

    // ========== –°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô ==========

    class ScriptUpdater {
        constructor() {
            this.github = new GitHubAPIUpdater(GITHUB_CONFIG);
        }

        // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        async updateScript() {
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞...');
            showNotification('–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ GitHub API...', 'info');

            try {
                // –ü—Ä–æ–±—É–µ–º GitHub API
                const result = await this.updateViaGitHubAPI();
                if (result.success) {
                    return result;
                }
            } catch (error) {
                console.warn('‚ùå GitHub API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
                showNotification('GitHub API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...', 'info');
            }

            // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            return await this.tryFallbackMethods();
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GitHub API
        async updateViaGitHubAPI() {
            const comparison = await this.github.compareVersions();

            console.log(`üìä –í–µ—Ä—Å–∏–∏: —Ç–µ–∫—É—â–∞—è ${comparison.current}, —É–¥–∞–ª–µ–Ω–Ω–∞—è ${comparison.remote}`);

            if (!comparison.hasUpdate) {
                showNotification(`–£ –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è ${comparison.current}`, 'success');
                return { success: true, updated: false, version: comparison.current };
            }

            const installResult = await this.installUpdate(comparison.content, `GitHub API v${comparison.remote}`);

            return {
                success: installResult,
                updated: installResult,
                version: comparison.remote,
                method: 'GitHub API'
            };
        }

        // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        async tryFallbackMethods() {
            const methods = [
                { name: 'Raw URL', func: this.updateViaRawURL.bind(this) },
                { name: 'HTML Parsing', func: this.updateViaHTMLParsing.bind(this) }
            ];

            for (let i = 0; i < methods.length; i++) {
                try {
                    console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ ${i + 1}: ${methods[i].name}...`);
                    showNotification(`–ú–µ—Ç–æ–¥ ${i + 1}: ${methods[i].name}...`, 'info');

                    const scriptContent = await methods[i].func();

                    if (this.validateScript(scriptContent)) {
                        const installResult = await this.installUpdate(scriptContent, methods[i].name);
                        return { success: installResult, updated: installResult, method: methods[i].name };
                    }
                } catch (error) {
                    console.warn(`‚ùå –ú–µ—Ç–æ–¥ ${i + 1} –Ω–µ—É–¥–∞—á–µ–Ω:`, error.message);
                    if (i < methods.length - 1) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                }
            }

            showNotification('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ. –û—Ç–∫—Ä—ã–≤–∞–µ–º GitHub...', 'error');
            window.open(`${GITHUB_CONFIG.webBase}/${GITHUB_CONFIG.owner}/${GITHUB_CONFIG.repo}`, '_blank');
            return { success: false, updated: false };
        }

        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥: Raw URL
        async updateViaRawURL() {
            const url = `${GITHUB_CONFIG.rawBase}/${GITHUB_CONFIG.owner}/${GITHUB_CONFIG.repo}/${GITHUB_CONFIG.branch}/${GITHUB_CONFIG.scriptPath}`;
            const fetchUrl = `${url}?v=${Date.now()}&_=${Math.random().toString(36).substring(7)}`;

            const response = await fetch(fetchUrl, {
                method: 'GET',
                headers: { 'Cache-Control': 'no-cache, no-store, must-revalidate' },
                cache: 'no-store'
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            return await response.text();
        }

        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥: HTML –ø–∞—Ä—Å–∏–Ω–≥
        async updateViaHTMLParsing() {
            const url = `${GITHUB_CONFIG.webBase}/${GITHUB_CONFIG.owner}/${GITHUB_CONFIG.repo}/blob/${GITHUB_CONFIG.branch}/${GITHUB_CONFIG.scriptPath}`;
            const fetchUrl = `${url}?t=${Date.now()}`;

            const response = await fetch(fetchUrl, {
                headers: { 'Cache-Control': 'no-cache' },
                cache: 'no-store'
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const html = await response.text();
            return this.extractScriptFromHTML(html);
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
        validateScript(content) {
            return content &&
                   content.length > 5000 &&
                   content.includes('==UserScript==') &&
                   content.includes('WMS Container Override');
        }

        // –ò–∑–≤–ª–µ—á—å —Å–∫—Ä–∏–ø—Ç –∏–∑ HTML
        extractScriptFromHTML(html) {
            const tableMatch = html.match(/<table[^>]*class="[^"]*highlight[^"]*"[^>]*>(.*?)<\/table>/s);
            if (!tableMatch) {
                throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–æ–¥–æ–º');
            }

            const content = tableMatch[1];
            const linePattern = /<td[^>]*class="[^"]*blob-code[^"]*"[^>]*>(.*?)<\/td>/gs;
            const lineMatches = [...content.matchAll(linePattern)];

            const scriptLines = lineMatches.map(match => {
                let line = match[1].replace(/<[^>]*>/g, '');
                return this.decodeHTMLEntities(line);
            });

            return scriptLines.join('\n');
        }

        // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å—É—â–Ω–æ—Å—Ç–µ–π
        decodeHTMLEntities(text) {
            const entities = {
                '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '"',
                '&#x27;': "'", '&#x2F;': '/', '&#39;': "'", '&nbsp;': ' ', '&#x60;': '`'
            };
            return text.replace(/&[#\w]+;/g, entity => entities[entity] || entity);
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        async installUpdate(scriptContent, methodName) {
            try {
                console.log(`‚úÖ –°–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑: ${methodName}`);

                const modifiedScript = this.prepareScriptForInstall(scriptContent, methodName);
                const blob = new Blob([modifiedScript], { type: 'text/javascript; charset=utf-8' });
                const blobUrl = URL.createObjectURL(blob);

                window.open(blobUrl, '_blank');

                showNotification(`–°–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ! (${methodName})`, 'success');
                this.showInstallInstructions();

                setTimeout(() => URL.revokeObjectURL(blobUrl), 60000);
                return true;
            } catch (error) {
                throw new Error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}`);
            }
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        prepareScriptForInstall(scriptContent, methodName) {
            const timestamp = Date.now();
            const newVersion = `4.0.${timestamp}`;

            let modified = scriptContent;
            modified = modified.replace(/@version\s+[\d.]+/g, `@version      ${newVersion}`);
            modified = modified.replace(/const\s+CURRENT_VERSION\s*=\s*['"`][\d.]+['"`]/g, `const CURRENT_VERSION = '${newVersion}'`);

            const updateComment = `
// ========== –û–ë–ù–û–í–õ–ï–ù–û ${new Date().toLocaleString('ru-RU')} ==========
// –í–µ—Ä—Å–∏—è: ${newVersion}
// –ú–µ—Ç–æ–¥: ${methodName}
// ================================================================

`;

            const headerEnd = modified.indexOf('==/UserScript==') + '==/UserScript=='.length;
            if (headerEnd > 0) {
                modified = modified.substring(0, headerEnd) + '\n' + updateComment + modified.substring(headerEnd);
            }

            return modified;
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
        showInstallInstructions() {
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.8); z-index: 99999; display: flex;
                align-items: center; justify-content: center; font-family: Arial, sans-serif;
            `;

            modal.innerHTML = `
                <div style="background: white; border-radius: 10px; padding: 30px; max-width: 400px; width: 90%; text-align: center;">
                    <div style="font-size: 20px; font-weight: bold; color: #4CAF50; margin-bottom: 15px;">
                        üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!
                    </div>
                    <div style="margin-bottom: 20px; font-size: 14px; color: #333;">
                        –ù–∞–∂–º–∏—Ç–µ <strong>"–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"</strong> –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                    </div>
                    <button onclick="this.closest('div').parentElement.remove()"
                            style="padding: 12px 24px; background: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;">
                        üëç –ü–æ–Ω—è–ª
                    </button>
                </div>
            `;

            document.body.appendChild(modal);
            setTimeout(() => modal.remove(), 20000);
        }
    }

    // ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ==========

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    function checkAndUpdatePresets() {
        const lastVersion = localStorage.getItem('wms_last_version');

        if (lastVersion !== CURRENT_VERSION) {
            console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastVersion || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ‚Üí ${CURRENT_VERSION}`);

            const savedPresets = localStorage.getItem('wms_user_presets');
            let currentUserPresets = {};

            if (savedPresets) {
                try {
                    currentUserPresets = JSON.parse(savedPresets);
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤:', e);
                }
            }

            Object.keys(TABLE_PRESETS).forEach(tableName => {
                const userPreset = currentUserPresets[tableName];
                const builtinPreset = TABLE_PRESETS[tableName];

                if (userPreset) {
                    const updatedPreset = { ...builtinPreset };
                    Object.keys(userPreset).forEach(locationName => {
                        if (!builtinPreset[locationName]) {
                            updatedPreset[locationName] = userPreset[locationName];
                        }
                    });
                    currentUserPresets[tableName] = updatedPreset;
                } else {
                    currentUserPresets[tableName] = { ...builtinPreset };
                }
            });

            userPresets = currentUserPresets;
            savePresets();
            localStorage.setItem('wms_last_version', CURRENT_VERSION);

            setTimeout(() => {
                showNotification(`–ü—Ä–µ—Å–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –≤–µ—Ä—Å–∏–∏ ${CURRENT_VERSION}!`, 'success');
            }, 2000);

            return true;
        }

        return false;
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    function loadSettings() {
        const wasUpdated = checkAndUpdatePresets();

        if (!wasUpdated) {
            const savedPresets = localStorage.getItem('wms_user_presets');
            if (savedPresets) {
                try {
                    userPresets = JSON.parse(savedPresets);
                } catch (e) {
                    initializeDefaultPresets();
                }
            } else {
                initializeDefaultPresets();
            }
        }

        const savedCurrentPreset = localStorage.getItem('wms_current_preset');
        if (savedCurrentPreset && userPresets[savedCurrentPreset]) {
            currentPreset = savedCurrentPreset;
        }

        const savedFontSize = localStorage.getItem('wms_font_size');
        if (savedFontSize) {
            LARGE_FONT_SIZE = savedFontSize;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤
    function initializeDefaultPresets() {
        userPresets = JSON.parse(JSON.stringify(TABLE_PRESETS));
        savePresets();
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    function saveSettings() {
        localStorage.setItem('wms_font_size', LARGE_FONT_SIZE);
        localStorage.setItem('wms_current_preset', currentPreset);
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç—ã
    function savePresets() {
        localStorage.setItem('wms_user_presets', JSON.stringify(userPresets));
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏
    function getCurrentMappings() {
        return userPresets[currentPreset] || {};
    }

    // ========== CSS –°–¢–ò–õ–ò ==========

    function injectCSS() {
        const styleId = 'wms-override-styles';
        const existingStyle = document.getElementById(styleId);
        if (existingStyle) {
            existingStyle.remove();
        }

        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
            .wms-large-container {
                font-size: ${LARGE_FONT_SIZE} !important;
                font-weight: bold !important;
                color: #2c3e50 !important;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3) !important;
                line-height: 1.2 !important;
                font-family: Arial, sans-serif !important;
            }

            .wms-highlight {
                background-color: #e8f5e8 !important;
                border: 3px solid #4CAF50 !important;
                transition: all 0.3s ease !important;
                border-radius: 4px !important;
                padding: 2px 4px !important;
            }

            .wms-tab-button {
                background: #f0f0f0; border: 1px solid #ddd; padding: 8px 12px;
                margin: 2px; border-radius: 4px; cursor: pointer; font-size: 11px;
                transition: all 0.2s ease;
            }

            .wms-tab-button:hover { background: #e0e0e0; }
            .wms-tab-button.active { background: #4CAF50; color: white; border-color: #4CAF50; }

            .wms-section {
                border: 1px solid #ddd; border-radius: 5px; padding: 10px;
                margin-bottom: 10px; background: #f8f9fa;
            }
        `;

        document.head.appendChild(style);
    }

    // ========== –†–ê–ë–û–¢–ê –° XPATH ==========

    function getElementByXPath(xpath, useCache = true) {
        const now = Date.now();

        if (useCache && cachedElements.lastUpdate > 0 && (now - cachedElements.lastUpdate) < CACHE_LIFETIME) {
            if (xpath === DIRECTION_XPATH && cachedElements.direction) {
                return cachedElements.direction;
            }
            if (xpath === CONTAINER_XPATH_1 && cachedElements.container1) {
                return cachedElements.container1;
            }
            if (xpath === CONTAINER_XPATH_2 && cachedElements.container2) {
                return cachedElements.container2;
            }
        }

        const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
        const element = result.singleNodeValue;

        if (element) {
            if (xpath === DIRECTION_XPATH) cachedElements.direction = element;
            if (xpath === CONTAINER_XPATH_1) cachedElements.container1 = element;
            if (xpath === CONTAINER_XPATH_2) cachedElements.container2 = element;
            cachedElements.lastUpdate = now;
        }

        return element;
    }

    function clearElementCache() {
        cachedElements = { direction: null, container1: null, container2: null, lastUpdate: 0 };
    }

    // ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò WMS ==========

    function getCurrentDirection(useCache = true) {
        const directionElement = getElementByXPath(DIRECTION_XPATH, useCache);
        return directionElement ? directionElement.textContent.trim() : null;
    }

    function findMappingByLocationName(fullDirection, mappings) {
        if (!fullDirection || !mappings) return null;

        const normalizedDirection = fullDirection.toLowerCase().trim();

        for (const [mappingKey, mappingValue] of Object.entries(mappings)) {
            const normalizedKey = mappingKey.toLowerCase().trim();
            if (normalizedDirection.includes(normalizedKey)) {
                console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û: "${mappingKey}" ‚Üí ${mappingValue}`);
                return mappingValue;
            }
        }

        return null;
    }

    function extractLocationName(fullDirection) {
        if (!fullDirection) return null;
        let cleaned = fullDirection.replace(/^\([^)]+\)\s*/, '');
        cleaned = cleaned.replace(/---.*$/, '');
        cleaned = cleaned.replace(/--.*$/, '');
        return cleaned.trim() || null;
    }

    function applyLargeFontToContainer1() {
        const containerElement1 = getElementByXPath(CONTAINER_XPATH_1);
        if (containerElement1) {
            containerElement1.classList.remove('wms-large-container');
            containerElement1.classList.add('wms-large-container');
            return true;
        }
        return false;
    }

    function setContainer(newContainer) {
        console.log(`üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${newContainer}`);

        const containers = [
            { xpath: CONTAINER_XPATH_1, name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1' },
            { xpath: CONTAINER_XPATH_2, name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 2' }
        ];

        let successCount = 0;
        containers.forEach(container => {
            const element = getElementByXPath(container.xpath);
            if (element) {
                element.textContent = newContainer;
                element.classList.add('wms-highlight');
                successCount++;
            }
        });

        if (successCount > 0) {
            setTimeout(() => applyLargeFontToContainer1(), 100);
            return true;
        }
        return false;
    }

    function checkAndReplace(forced = false) {
        const currentDirection = getCurrentDirection(!forced);
        const currentMappings = getCurrentMappings();

        if (currentDirection) {
            let newContainer = findMappingByLocationName(currentDirection, currentMappings);

            if (!newContainer) {
                const locationName = extractLocationName(currentDirection);
                if (locationName) {
                    newContainer = findMappingByLocationName(locationName, currentMappings);
                }
            }

            if (newContainer) {
                const containerElement1 = getElementByXPath(CONTAINER_XPATH_1, !forced);
                const containerElement2 = getElementByXPath(CONTAINER_XPATH_2, !forced);

                const currentContainer1 = containerElement1 ? containerElement1.textContent.trim() : '';
                const currentContainer2 = containerElement2 ? containerElement2.textContent.trim() : '';

                if (currentContainer1 !== newContainer || currentContainer2 !== newContainer) {
                    setContainer(newContainer);
                    return true;
                }
            }
        }
        return false;
    }

    function quickCheck() {
        const currentDirection = getCurrentDirection(true);
        const currentMappings = getCurrentMappings();

        if (currentDirection) {
            let newContainer = findMappingByLocationName(currentDirection, currentMappings);

            if (!newContainer) {
                const locationName = extractLocationName(currentDirection);
                if (locationName) {
                    newContainer = findMappingByLocationName(locationName, currentMappings);
                }
            }

            if (newContainer) {
                const containerElement1 = getElementByXPath(CONTAINER_XPATH_1, true);
                if (containerElement1) {
                    const currentContainer = containerElement1.textContent.trim();
                    if (currentContainer !== newContainer) {
                        return checkAndReplace(false);
                    }
                }
            }
        }
        return false;
    }

    // ========== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==========

    function showNotification(message, type = 'info') {
        if (typeof GM_notification !== 'undefined' && type !== 'error') {
            GM_notification({
                title: 'WMS Container Override',
                text: message,
                timeout: 4000
            });
            return;
        }

        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; padding: 15px 20px;
            background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
            color: white; border-radius: 5px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000; font-family: Arial, sans-serif; font-size: 14px;
            max-width: 350px; word-wrap: break-word;
        `;
        notification.textContent = message;

        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), type === 'error' ? 6000 : 4000);
    }

    // ========== –ò–ù–¢–ï–†–§–ï–ô–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø ==========

    function createControlPanel() {
        const panel = document.createElement('div');
        panel.id = 'wms-control-panel';
        panel.style.cssText = `
            position: fixed; top: 10px; left: 10px; background: white;
            border: 2px solid #ddd; border-radius: 8px; padding: 15px;
            z-index: 9999; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            font-family: Arial, sans-serif; font-size: 12px;
            max-width: 500px; max-height: 80vh; overflow-y: auto; display: none;
        `;

        const currentMappings = getCurrentMappings();
        const mappingsCount = Object.keys(currentMappings).length;

        panel.innerHTML = `
            <div style="margin-bottom: 10px; font-weight: bold; color: #333;">
                üöÄ WMS Container Override Enhanced v${CURRENT_VERSION}
            </div>

            <div style="margin-bottom: 15px; font-size: 11px; color: #666;">
                GitHub API + –∞–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            </div>

            <div class="wms-section">
                <div style="font-weight: bold; margin-bottom: 8px; color: #333;">
                    üéØ –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª: <span style="color: #FF5722;">${currentPreset}</span> (${mappingsCount} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)
                </div>
                <div style="display: flex; gap: 5px; margin-bottom: 8px;">
                    <select id="wms-table-preset" style="flex: 1; padding: 5px; border: 1px solid #ddd; border-radius: 3px; font-size: 11px;">
                        <option value="">-- –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å—Ç–æ–ª --</option>
                        ${Object.keys(userPresets).map(tableName => {
                            const count = Object.keys(userPresets[tableName]).length;
                            return `<option value="${tableName}">${tableName} (${count})</option>`;
                        }).join('')}
                    </select>
                    <button id="wms-switch-preset" style="padding: 5px 10px; background: #FF5722; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;">
                        –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å
                    </button>
                </div>
            </div>

            <div class="wms-section">
                <label style="display: block; margin-bottom: 5px; font-weight: bold;">–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (px):</label>
                <div style="display: flex; gap: 5px; align-items: center;">
                    <input type="number" id="wms-font-size-input" value="${parseInt(LARGE_FONT_SIZE)}" min="12" max="100" style="width: 80px; padding: 5px; border: 1px solid #ddd; border-radius: 3px;">
                    <span style="font-size: 11px; color: #666;">px</span>
                    <button id="wms-apply-font-size" style="padding: 5px 10px; background: #9C27B0; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;">
                        –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                    </button>
                </div>
            </div>

            <div style="margin-bottom: 15px;">
                <button id="wms-update-script" style="width: 100%; padding: 12px; background: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; font-weight: bold;">
                    üöÄ –û–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ GitHub API
                </button>
            </div>

            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 5px; margin-bottom: 15px;">
                <button id="wms-test-now" style="padding: 8px 12px; background: #2196F3; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;">
                    üîç –¢–µ—Å—Ç —Å–µ–π—á–∞—Å
                </button>
                <button id="wms-diagnose" style="padding: 8px 12px; background: #607D8B; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;">
                    üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                </button>
            </div>

            <div style="margin-top: 15px; text-align: center; padding-top: 10px; border-top: 1px solid #ddd;">
                <button id="wms-close-panel" style="padding: 5px 15px; background: #666; color: white; border: none; border-radius: 3px; cursor: pointer;">
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        `;

        document.body.appendChild(panel);
        setupPanelEventHandlers(panel);
    }

    function setupPanelEventHandlers(panel) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        document.getElementById('wms-update-script').addEventListener('click', function() {
            const updater = new ScriptUpdater();
            updater.updateScript();
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
        document.getElementById('wms-switch-preset').addEventListener('click', function() {
            const selectedTable = document.getElementById('wms-table-preset').value;
            if (selectedTable && userPresets[selectedTable]) {
                currentPreset = selectedTable;
                saveSettings();
                panel.style.display = 'none';
                createControlPanel();
                document.getElementById('wms-control-panel').style.display = 'block';
                showNotification(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ "${selectedTable}"`, 'success');
            }
        });

        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        document.getElementById('wms-apply-font-size').addEventListener('click', function() {
            const newSize = document.getElementById('wms-font-size-input').value;
            if (newSize && newSize >= 12 && newSize <= 100) {
                LARGE_FONT_SIZE = newSize + 'px';
                saveSettings();
                injectCSS();
                applyLargeFontToContainer1();
                showNotification(`–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${LARGE_FONT_SIZE}`, 'success');
            }
        });

        // –¢–µ—Å—Ç —Å–µ–π—á–∞—Å
        document.getElementById('wms-test-now').addEventListener('click', function() {
            clearElementCache();
            const result = checkAndReplace(true);
            showNotification(result ? '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –Ω–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è!' : '–ü—Ä–æ–≤–µ—Ä–∫–∞ - –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç', 'info');
        });

        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        document.getElementById('wms-diagnose').addEventListener('click', function() {
            console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
            console.log('–í–µ—Ä—Å–∏—è:', CURRENT_VERSION);
            console.log('–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç:', currentPreset);
            console.log('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –ø—Ä–µ—Å–µ—Ç–µ:', Object.keys(getCurrentMappings()).length);

            const directionElement = getElementByXPath(DIRECTION_XPATH);
            console.log('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', directionElement ? directionElement.textContent : '–ù–ï –ù–ê–ô–î–ï–ù–û');

            const containerElement1 = getElementByXPath(CONTAINER_XPATH_1);
            console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1:', containerElement1 ? containerElement1.textContent : '–ù–ï –ù–ê–ô–î–ï–ù–û');

            showNotification('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å)', 'info');
        });

        // –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
        document.getElementById('wms-close-panel').addEventListener('click', function() {
            panel.style.display = 'none';
        });
    }

    function createToggleButton() {
        const button = document.createElement('button');
        button.id = 'wms-toggle-button';
        button.innerHTML = '‚öôÔ∏è';
        button.style.cssText = `
            position: fixed; top: 10px; right: 10px; width: 50px; height: 50px;
            border-radius: 50%; background: #4CAF50; color: white; border: none;
            font-size: 20px; cursor: pointer; z-index: 9998;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15); transition: all 0.3s ease;
        `;

        button.addEventListener('click', function() {
            const panel = document.getElementById('wms-control-panel');
            if (panel) {
                panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
            } else {
                createControlPanel();
                document.getElementById('wms-control-panel').style.display = 'block';
            }
        });

        document.body.appendChild(button);
    }

    // ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê–ú–ò ==========

    function startNormalMode() {
        if (normalCheckTimer) {
            clearInterval(normalCheckTimer);
        }

        setTimeout(() => applyLargeFontToContainer1(), 500);

        normalCheckTimer = setInterval(() => {
            if (isEnabled) {
                quickCheck();
                applyLargeFontToContainer1();
            }
        }, CHECK_INTERVAL);

        console.log(`üöÄ –ó–∞–ø—É—â–µ–Ω –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∂–¥—ã–µ ${CHECK_INTERVAL}ms)`);
    }

    function setupDOMObserver() {
        if (!window.MutationObserver) return;

        const observer = new MutationObserver((mutations) => {
            if (!isEnabled) return;

            let shouldCheck = false;
            mutations.forEach((mutation) => {
                if (mutation.type === 'childList' || mutation.type === 'characterData') {
                    const target = mutation.target;
                    if (target.tagName === 'B' || target.tagName === 'H1' ||
                        target.closest('div[5]') || target.querySelector('b, h1')) {
                        shouldCheck = true;
                    }
                }
            });

            if (shouldCheck) {
                setTimeout(quickCheck, 50);
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true,
            characterData: true
        });

        console.log('üëÄ DOM Observer –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }

    function setupHotkeys() {
        document.addEventListener('keydown', function(e) {
            // Ctrl+Shift+W - –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
            if (e.ctrlKey && e.shiftKey && e.code === 'KeyW') {
                e.preventDefault();
                const panel = document.getElementById('wms-control-panel');
                if (panel) {
                    panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
                } else {
                    createControlPanel();
                    document.getElementById('wms-control-panel').style.display = 'block';
                }
            }

            // Ctrl+Shift+U - –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
            if (e.ctrlKey && e.shiftKey && e.code === 'KeyU') {
                e.preventDefault();
                const updater = new ScriptUpdater();
                updater.updateScript();
            }

            // Ctrl+Shift+T - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
            if (e.ctrlKey && e.shiftKey && e.code === 'KeyT') {
                e.preventDefault();
                clearElementCache();
                checkAndReplace(true);
            }
        });

        console.log('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
    }

    // ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==========

    function initialize() {
        console.log('üöÄ WMS Container Override Enhanced v4.0 —Å GitHub API –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

        injectCSS();
        loadSettings();
        createToggleButton();
        setupHotkeys();
        setupDOMObserver();
        startNormalMode();

        setTimeout(() => checkAndReplace(true), 1000);

        const presetsCount = Object.keys(getCurrentMappings()).length;
        const lastVersion = localStorage.getItem('wms_last_version');
        const updateInfo = lastVersion !== CURRENT_VERSION ? ' (–æ–±–Ω–æ–≤–ª–µ–Ω–æ!)' : '';

        showNotification(`WMS Override v${CURRENT_VERSION} –∞–∫—Ç–∏–≤–µ–Ω! –°—Ç–æ–ª: "${currentPreset}" (${presetsCount})${updateInfo}`, 'success');
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.updateWMSScript = () => {
        const updater = new ScriptUpdater();
        updater.updateScript();
    };

    window.wmsShowVersion = () => console.log(`WMS Container Override v${CURRENT_VERSION}`);

    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        setTimeout(initialize, 150);
    }

    console.log('‚úÖ WMS Container Override Enhanced v4.0 –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üîß –ö–æ–º–∞–Ω–¥—ã: updateWMSScript(), wmsShowVersion()');
    console.log('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Ctrl+Shift+W (–ø–∞–Ω–µ–ª—å), Ctrl+Shift+U (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ), Ctrl+Shift+T (—Ç–µ—Å—Ç)');

})();
