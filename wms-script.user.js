// ==UserScript==
// @name         WMS Container Override Enhanced - Manual Updates
// @namespace    http://tampermonkey.net/
// @version      2.8
// @description  –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ WMS —Å —Ä—É—á–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ GitHub
// @author       –ñ–∏–≥–∞–ª–æ–≤ –Æ.–í.
// @match        https://wms.vseinstrumenti.ru/*
// @grant        GM_xmlhttpRequest
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_notification
// @exclude      https://wms.vseinstrumenti.ru/Report/*
// @updateURL    https://raw.githubusercontent.com/Pwnzord123/OtgruzkaSPB/main/wms-script.user.js
// @downloadURL  https://raw.githubusercontent.com/Pwnzord123/OtgruzkaSPB/main/wms-script.user.js
// @supportURL   https://github.com/Pwnzord123/OtgruzkaSPB
// ==/UserScript==

(function() {
    'use strict';

    // ========== –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô ==========
    
    const UPDATE_CONFIG = {
        // –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        DIRECT_UPDATE_URL: 'https://raw.githubusercontent.com/Pwnzord123/OtgruzkaSPB/main/wms-script.user.js',
        GITHUB_REPO: 'https://github.com/Pwnzord123/OtgruzkaSPB'
    };

    // –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    const CURRENT_VERSION = '3.0';

    // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    function openUpdateLink() {
        console.log('üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        showNotification('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...', 'info');
        window.open(UPDATE_CONFIG.DIRECT_UPDATE_URL, '_blank');
        
        setTimeout(() => {
            showUpdateInstructions();
        }, 500);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é
    function showUpdateInstructions() {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0,0,0,0.7); z-index: 99999; display: flex;
            align-items: center; justify-content: center; font-family: Arial, sans-serif;
        `;
        
        modal.innerHTML = `
            <div style="background: white; border-radius: 10px; padding: 25px; max-width: 450px; width: 90%; box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
                <div style="text-align: center; margin-bottom: 20px;">
                    <div style="font-size: 18px; font-weight: bold; color: #4CAF50; margin-bottom: 10px;">
                        üöÄ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∞
                    </div>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <div style="font-weight: bold; margin-bottom: 10px; color: #333;">üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</div>
                    <div style="background: #f5f5f5; padding: 15px; border-radius: 5px; font-size: 13px; line-height: 1.5;">
                        <div style="margin-bottom: 8px;">1Ô∏è‚É£ –í –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ Tampermonkey –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫—É <strong>"–û–±–Ω–æ–≤–∏—Ç—å"</strong></div>
                        <div style="margin-bottom: 8px;">2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ <strong>"–û–±–Ω–æ–≤–∏—Ç—å"</strong> –∏–ª–∏ <strong>"–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"</strong></div>
                        <div style="margin-bottom: 8px;">3Ô∏è‚É£ –ó–∞–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</div>
                        <div>4Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É (<strong>F5</strong>)</div>
                    </div>
                </div>
                
                <div style="text-align: center;">
                    <button onclick="this.closest('div').parentElement.remove()" 
                            style="padding: 10px 20px; background: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px;">
                        üëç –ü–æ–Ω—è—Ç–Ω–æ
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        setTimeout(() => {
            if (modal.parentElement) {
                modal.remove();
            }
        }, 15000);
    }

    // ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========

    // XPath –ø—É—Ç–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
    const DIRECTION_XPATH = '/html/body/div/div/div/div[1]/main/div/div/div/div[5]/div/b[2]';
    const CONTAINER_XPATH_1 = '/html/body/div[1]/div/div/div[1]/main/div/div/div/div[4]/form/div/div[5]/div[2]/div/div/div[1]/h1';
    const CONTAINER_XPATH_2 = '/html/body/div[1]/div/div/div[1]/main/div/div/div/div[5]/div/b[1]';

    // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    let LARGE_FONT_SIZE = '100px';

    // –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
    let currentPreset = '–°—Ç–æ–ª 18';

    // –†–∞–±–æ—á–∏–µ –ø—Ä–µ—Å–µ—Ç—ã (–º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
    let userPresets = {};

    // –ü—Ä–µ—Å–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ (–í–°–¢–†–û–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï) - –ø–æ –±—É–∫–≤–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
    const TABLE_PRESETS = {
        "–°—Ç–æ–ª 12": {
            "–ü–∞—Ä–Ω–∞—Å": "–ø–∏—Å—å–∫–∞",
            "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è": "2---–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è",
            "–í—Å–µ–≤–æ–ª–æ–∂—Å–∫": "3---–í—Å–µ–≤–æ–ª–æ–∂—Å–∫",
            "–ö—Ä–∞—Å–Ω–æ–µ": "4---–ö—Ä–∞—Å–Ω–æ–µ –°–µ–ª–æ",
            "–û–∫—Ç—è–±—Ä—è": "5---–ì–∞—Ç—á–∏–Ω–∞ 25 –û–∫—Ç—è–±—Ä—è",
            "–õ–∞–¥–æ–∂—Å–∫–∞—è": "6---–õ–∞–¥–æ–∂—Å–∫–∞—è",
            "–í–µ—Ç–µ—Ä–∞–Ω–æ–≤": "7---–í–µ—Ç–µ—Ä–∞–Ω–æ–≤",
            "–ë–∞–±—É—à–∫–∏–Ω–∞": "8---–ë–∞–±—É—à–∫–∏–Ω–∞",
            "–ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è": "9---–ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –¥.72",
            "–ë–æ–ª—å—à–µ–≤–∏–∫–æ–≤": "10---–ë–æ–ª—å—à–µ–≤–∏–∫–æ–≤",
            "–°–æ–ª–Ω–µ—á–Ω—ã–π": "11---–°–æ–ª–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥",
            "–î–µ–≤—è—Ç–∫–∏–Ω–æ": "12---–î–µ–≤—è—Ç–∫–∏–Ω–æ",
            "–¢–µ–ª—å–º–∞–Ω–∞": "13---–¢–µ–ª—å–º–∞–Ω–∞",
            "–°–≤–µ—Ä–¥–ª–æ–≤–∞": "14---–°–≤–µ—Ä–¥–ª–æ–≤–∞",
            "–ë—É–≥—Ä—ã": "15---–ë—É–≥—Ä—ã",
            "–ü–æ–ø–æ–≤–∞": "16---–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ –ü–æ–ø–æ–≤–∞",
            "–ù–∏–∫–æ–ª—å—Å–∫–æ–µ": "17---–ù–∏–∫–æ–ª—å—Å–∫–æ–µ"
        },
        "–°—Ç–æ–ª 14": {
            "–û–±–æ—Ä–æ–Ω—ã": "1---–û–±—É—Ö–æ–≤—Å–∫–æ–π –û–±–æ—Ä–æ–Ω—ã",
            "–ù–æ–≤–æ—Å–µ–ª—å–µ": "2---–ù–æ–≤–æ—Å–µ–ª—å–µ",
            "–†—ã–±–∞—Ü–∫–æ–µ": "3---–†—ã–±–∞—Ü–∫–æ–µ",
            "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è": "4---–ú–æ—Å–∫–æ–≤—Å–∫–∞—è",
            "–ë–æ—Ä–æ–≤–∞—è": "5---–ë–æ—Ä–æ–≤–∞—è",
            "–ú—É–∂–µ—Å—Ç–≤–∞": "6---–ü–ª–æ—â–∞–¥—å –ú—É–∂–µ—Å—Ç–≤–∞",
            "–†–µ–≤–æ–ª—é—Ü–∏–∏": "7---–®–æ—Å—Å–µ –†–µ–≤–æ–ª—é—Ü–∏–∏",
            "–î–µ—Å–∞–Ω—Ç–Ω–∏–∫–æ–≤": "8---–î–µ—Å–∞–Ω—Ç–Ω–∏–∫–æ–≤",
            "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è": "9---–õ–æ–º–æ–Ω–æ—Å–æ–≤ –®–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è",
            "–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç": "10---–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç",
            "–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π": "11---–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π –¥.55",
            "–°–ª–∞–≤—è–Ω–∫–∞": "12---–°–ª–∞–≤—è–Ω–∫–∞",
            "–ö—É–∑–Ω–µ—Ü–æ–≤—Å–∫–∞—è": "13---–ö—É–∑–Ω–µ—Ü–æ–≤—Å–∫–∞—è",
            "–ö—É–∑—å–º–æ–ª–æ–≤—Å–∫–∏–π": "14---–ö—É–∑—å–º–æ–ª–æ–≤—Å–∫–∏–π",
            "–ë–æ–≥–∞—Ç—ã—Ä—Å–∫–∏–π": "15---–ë–æ–≥–∞—Ç—ã—Ä—Å–∫–∏–π",
            "–ú—É—Ä–º–∞–Ω—Å–∫–æ–µ": "16---–ú—É—Ä–º–∞–Ω—Å–∫–æ–µ –®–æ—Å—Å–µ",
            "–ü–∞—Ä–∞—à—é—Ç–Ω–∞—è": "17---–ü–∞—Ä–∞—à—é—Ç–Ω–∞—è",
            "–Æ–∂–Ω–æ–µ —à–æ—Å—Å–µ": "18---–Æ–∂–Ω–æ–µ –®–æ—Å—Å–µ",
            "–ú–µ–±–µ–ª—å–Ω–∞—è": "19---–ú–µ–±–µ–ª—å–Ω–∞—è"
        },
        "–°—Ç–æ–ª 16": {
            "–≠–Ω–≥–µ–ª—å—Å–∞": "1---–≠–Ω–≥–µ–ª—å—Å–∞ –¥.70",
            "–¢–∞–ª–ª–∏–Ω—Å–∫–æ–µ": "2---–¢–∞–ª–ª–∏–Ω—Å–∫–æ–µ –®–æ—Å—Å–µ",
            "–Ø–Ω–∏–Ω–æ": "3---–Ø–Ω–∏–Ω–æ",
            "–¢–≤–µ—Ä—Å–∫–∞—è": "4---–ö–æ–ª–ø–∏–Ω–æ –¢–≤–µ—Ä—Å–∫–∞—è",
            "–ë–ª–∞–≥–æ–¥–∞—Ç–Ω–∞—è": "5---–ë–ª–∞–≥–æ–¥–∞—Ç–Ω–∞—è",
            "–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è": "6---–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è",
            "–ö–æ–ª–ø–∏–Ω–æ –õ–µ–Ω–∏–Ω–∞": "7---–ö–æ–ª–ø–∏–Ω–æ –õ–µ–Ω–∏–Ω–∞",
            "–ö—Ä–∞—Å–Ω–æ–ø—É—Ç–∏–ª–æ–≤—Å–∫–∞—è": "8---–ö—Ä–∞—Å–Ω–æ–ø—É—Ç–∏–ª–æ–≤—Å–∫–∞—è",
            "–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è": "9---–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è",
            "–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π": "10---–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π",
            "–ù–∞—Ä–æ–¥–Ω–∞—è": "11---–ù–∞—Ä–æ–¥–Ω–∞—è",
            "–ß–µ—Ä–Ω–∏–≥–æ–≤—Å–∫–∞—è": "12---–ß–µ—Ä–Ω–∏–≥–æ–≤—Å–∫–∞—è",
            "–°–µ—Ä—Ç–æ–ª–æ–≤–æ": "13---–°–µ—Ä—Ç–æ–ª–æ–≤–æ",
            "–ó–≤–µ—Ä–µ–≤–æ–π": "14---–ì–∞—Ç—á–∏–Ω–∞ –ó–≤–µ—Ä–µ–≤–æ–π-–ö–Ω—ã—à–∞",
            "–ö—É–±–∏–Ω—Å–∫–∞—è": "15---–ö—É–±–∏–Ω—Å–∫–∞—è",
            "–ó–µ–ª–µ–Ω–æ–≥–æ—Ä—Å–∫": "16---–ó–µ–ª–µ–Ω–æ–≥–æ—Ä—Å–∫",
            "–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∏–π": "17---–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∏–π",
            "–ö—É–±–∞—Ç—É—Ä–∞": "18---–ö—É–±–∞—Ç—É—Ä–∞"
        },
        "–°—Ç–æ–ª 18": {
            "–°—Ç–∞—á–µ–∫": "1---–°—Ç–∞—á–µ–∫",
            "–î—ã–±–µ–Ω–∫–æ": "2---–î—ã–±–µ–Ω–∫–æ",
            "–õ–µ–Ω–∏–Ω—Å–∫–∏–π": "3---–õ–µ–Ω–∏–Ω—Å–∫–∏–π",
            "–í—ã–±–æ—Ä–≥—Å–∫–∞—è": "4---–í—ã–±–æ—Ä–≥—Å–∫–∞—è",
            "–ö–∏—Ä–æ–≤—Å–∫": "5---–ö–∏—Ä–æ–≤—Å–∫",
            "–ü—É—à–∫–∏–Ω-": "6---–ü—É—à–∫–∏–Ω",
            "–û–ø—Ç–∏–∫–æ–≤": "7---–û–ø—Ç–∏–∫–æ–≤",
            "–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∞—è": "8---–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∞—è",
            "–ü–∏—Å–∫–∞—Ä—ë–≤–∫–∞": "9---–ü–∏—Å–∫–∞—Ä–µ–≤–∫–∞",
            "–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∏–π": "10---–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∏–π",
            "–ù–∞—Ä–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç": "11---–ù–∞—Ä–≤—Å–∫–∏–π",
            "–ì–∞—Ç—á–∏–Ω–∞": "12---–ì–∞—Ç—á–∏–Ω–∞ –ü—É—à–∫–∏–Ω—Å–∫–æ–µ",
            "–°–ª–∞–≤—ã": "13---–°–ª–∞–≤—ã",
            "–≠–Ω–≥–µ–ª—å—Å–∞": "14---–≠–Ω–≥–µ–ª—å—Å–∞ –¥.133",
            "–í—Å–µ–≤–æ–ª–æ–∂—Å–∫ –ö—Ä—ã–º—Å–∫–∞—è": "15---–í—Å–µ–≤–æ–ª–æ–∂—Å–∫ –ö—Ä—ã–º—Å–∫–∞—è",
            "–ö–æ–º–º—É–Ω–∞—Ä": "16---–ö–æ–º–º—É–Ω–∞—Ä",
            "–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ": "17---–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ",
            "–ü–æ—Ç–∞–ø–æ–≤–∞": "18---–ü–æ—Ç–∞–ø–æ–≤–∞",
            "–í—ã–±–æ—Ä–≥—Å–∫–æ–µ": "19---–í—ã–±–æ—Ä–≥—Å–∫–æ–µ —à–æ—Å—Å–µ"
        },
        "–°—Ç–æ–ª 20": {
            "–ë–∞–ª—Ç–∏–π—Å–∫–∏–π": "1---–ë–∞–ª—Ç–∏–π—Å–∫–∏–π –≤–æ–∫–∑–∞–ª",
            "–ü–æ–ª—é—Å—Ç—Ä–æ–≤—Å–∫–∏–π": "2---–ü–æ–ª—é—Å—Ç—Ä–æ–≤—Å–∫–∏–π",
            "–ö—É–ø—á–∏–Ω–æ": "3---–ö—É–ø—á–∏–Ω–æ",
            "–ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π": "4---–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π –ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π",
            "–î–≤–∏–Ω—Å–∫–∞—è": "5---–î–≤–∏–Ω—Å–∫–∞—è",
            "–§–µ–¥–æ—Ä–æ–≤—Å–∫–æ–µ": "6---–§—ë–¥–æ—Ä–æ–≤—Å–∫–æ–µ",
            "–¢–æ—Å–Ω–æ": "7---–¢–æ—Å–Ω–æ",
            "–ü–µ—Ç–µ—Ä–≥–æ—Ñ": "8---–ü–µ—Ç–µ—Ä–≥–æ—Ñ –ì–æ—Å—Ç–∏–ª–∏—Ü–∫–∞—è",
            "–ù–æ–≤–æ–µ –î–µ–≤—è—Ç–∫–∏–Ω–æ": "9---–ù–æ–≤–æ–µ –î–µ–≤—è—Ç–∫–∏–Ω–æ",
            "–ß–µ—Ä–Ω–∞—è —Ä–µ—á–∫–∞": "10---–ß–µ—Ä–Ω–∞—è —Ä–µ—á–∫–∞",
            "–ë–µ–≥–æ–≤–∞—è": "11---–ë–µ–≥–æ–≤–∞—è",
            "–°—Ç–∞—Ä–æ–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∞—è": "12---–°—Ç–∞—Ä–æ–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∞—è",
            "–ú–µ—Ç–∞–ª–ª–æ—Å—Ç—Ä–æ–π": "13---–ú–µ—Ç–∞–ª–ª–æ—Å—Ç—Ä–æ–π –°–∞–¥–æ–≤–∞—è",
            "–•—É–¥–æ–∂–Ω–∏–∫–æ–≤": "14---–•—É–¥–æ–∂–Ω–∏–∫–æ–≤",
            "–¢—Ä–∏–±—É—Ü–∞": "15---–¢—Ä–∏–±—É—Ü–∞",
            "–†–æ—â–∏–Ω–æ": "16---–†–æ—â–∏–Ω–æ –°–æ–≤–µ—Ç—Å–∫–∞—è",
            "–°—Ç—Ä–æ–π–î–≤–æ—Ä": "17---–°—Ç—Ä–æ–π–¥–≤–æ—Ä",
            "–õ–∞–Ω—Å–∫–æ–µ": "18---–õ–∞–Ω—Å–∫–æ–µ –®–æ—Å—Å–µ",
            "–ü–ª–µ—Å–µ—Ü–∫–∞—è": "19---–ü–ª–µ—Å–µ—Ü–∫–∞—è"
        }
    };

    // ========== –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ==========

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
    const CHECK_INTERVAL = 160; // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º—Å)
    const CACHE_LIFETIME = 100; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º—Å)

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let isEnabled = true;
    let normalCheckTimer = null;
    let fastCheckTimer = null;

    // –ö—ç—à —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    let cachedElements = {
        direction: null,
        container1: null,
        container2: null,
        lastUpdate: 0
    };

    // ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ==========

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
    function checkAndUpdatePresets() {
        const lastVersion = localStorage.getItem('wms_last_version');
        
        if (lastVersion !== CURRENT_VERSION) {
            console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastVersion || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ‚Üí ${CURRENT_VERSION}`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ—Å–µ—Ç—ã
            const savedPresets = localStorage.getItem('wms_user_presets');
            let currentUserPresets = {};
            
            if (savedPresets) {
                try {
                    currentUserPresets = JSON.parse(savedPresets);
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤:', e);
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            Object.keys(TABLE_PRESETS).forEach(tableName => {
                const userPreset = currentUserPresets[tableName];
                const builtinPreset = TABLE_PRESETS[tableName];
                
                if (userPreset) {
                    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ—Å–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    const updatedPreset = { ...builtinPreset }; // –ù–∞—á–∏–Ω–∞–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è/–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                    Object.keys(userPreset).forEach(locationName => {
                        // –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å—Ç—å –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –ø—Ä–µ—Å–µ—Ç–µ, –±–µ—Ä–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                        if (!builtinPreset[locationName]) {
                            updatedPreset[locationName] = userPreset[locationName];
                            console.log(`üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${tableName}["${locationName}"]`);
                        }
                    });
                    
                    currentUserPresets[tableName] = updatedPreset;
                    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ—Å–µ—Ç: ${tableName}`);
                } else {
                    // –ï—Å–ª–∏ –ø—Ä–µ—Å–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π
                    currentUserPresets[tableName] = { ...builtinPreset };
                    console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç: ${tableName}`);
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
            userPresets = currentUserPresets;
            savePresets();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
            localStorage.setItem('wms_last_version', CURRENT_VERSION);
            
            console.log(`üéâ –ü—Ä–µ—Å–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –≤–µ—Ä—Å–∏–∏ ${CURRENT_VERSION}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            setTimeout(() => {
                showNotification(`–ü—Ä–µ—Å–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –≤–µ—Ä—Å–∏–∏ ${CURRENT_VERSION}!`, 'success');
            }, 2000);
            
            return true; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
        }
        
        return false; // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage (–µ—Å–ª–∏ –µ—Å—Ç—å)
    function loadSettings() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ—Å–µ—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        const wasUpdated = checkAndUpdatePresets();
        
        if (!wasUpdated) {
            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            const savedPresets = localStorage.getItem('wms_user_presets');
            if (savedPresets) {
                try {
                    userPresets = JSON.parse(savedPresets);
                    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ—Å–µ—Ç—ã:', Object.keys(userPresets));
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤:', e);
                    initializeDefaultPresets();
                }
            } else {
                // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∫–æ–ø–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
                console.log('–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ—Å–µ—Ç—ã –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
                initializeDefaultPresets();
            }
        }

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
        const savedCurrentPreset = localStorage.getItem('wms_current_preset');
        if (savedCurrentPreset && userPresets[savedCurrentPreset]) {
            currentPreset = savedCurrentPreset;
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç:', currentPreset);
        }

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        const savedFontSize = localStorage.getItem('wms_font_size');
        if (savedFontSize) {
            LARGE_FONT_SIZE = savedFontSize;
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:', LARGE_FONT_SIZE);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    function initializeDefaultPresets() {
        userPresets = JSON.parse(JSON.stringify(TABLE_PRESETS)); // –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
        savePresets();
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:', Object.keys(userPresets));
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
    function saveSettings() {
        localStorage.setItem('wms_font_size', LARGE_FONT_SIZE);
        localStorage.setItem('wms_current_preset', currentPreset);
        console.log('–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç—ã
    function savePresets() {
        localStorage.setItem('wms_user_presets', JSON.stringify(userPresets));
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ—Å–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏
    function getCurrentMappings() {
        return userPresets[currentPreset] || {};
    }

    // ========== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–¢–û–õ–û–í ==========

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–æ–ª
    function createCustomTable(tableName) {
        if (!tableName || tableName.trim() === '') {
            return { success: false, message: '–ò–º—è —Å—Ç–æ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' };
        }

        const trimmedName = tableName.trim();

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∏–º—è –Ω–µ –∑–∞–Ω—è—Ç–æ
        if (userPresets[trimmedName]) {
            return { success: false, message: '–°—Ç–æ–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' };
        }

        // –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª
        userPresets[trimmedName] = {};
        savePresets();

        console.log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–æ–ª: "${trimmedName}"`);
        return { success: true, message: `–°—Ç–æ–ª "${trimmedName}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ` };
    }

    // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–æ–ª
    function deleteCustomTable(tableName) {
        // –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã
        if (TABLE_PRESETS[tableName]) {
            return { success: false, message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å—Ç–æ–ª' };
        }

        if (!userPresets[tableName]) {
            return { success: false, message: '–°—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–æ–ª 18
        if (currentPreset === tableName) {
            currentPreset = '–°—Ç–æ–ª 18';
            saveSettings();
        }

        delete userPresets[tableName];
        savePresets();

        console.log(`–£–¥–∞–ª–µ–Ω —Å—Ç–æ–ª: "${tableName}"`);
        return { success: true, message: `–°—Ç–æ–ª "${tableName}" —É–¥–∞–ª–µ–Ω` };
    }

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç–æ–ª
    function renameTable(oldName, newName) {
        if (!newName || newName.trim() === '') {
            return { success: false, message: '–ù–æ–≤–æ–µ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' };
        }

        const trimmedNewName = newName.trim();

        // –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã
        if (TABLE_PRESETS[oldName]) {
            return { success: false, message: '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å—Ç–æ–ª' };
        }

        if (!userPresets[oldName]) {
            return { success: false, message: '–ò—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        if (userPresets[trimmedNewName]) {
            return { success: false, message: '–°—Ç–æ–ª —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' };
        }

        // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
        userPresets[trimmedNewName] = { ...userPresets[oldName] };
        delete userPresets[oldName];

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª
        if (currentPreset === oldName) {
            currentPreset = trimmedNewName;
            saveSettings();
        }

        savePresets();

        console.log(`–°—Ç–æ–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: "${oldName}" ‚Üí "${trimmedNewName}"`);
        return { success: true, message: `–°—Ç–æ–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ "${trimmedNewName}"` };
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª
    function copyTable(sourceName, newName) {
        if (!newName || newName.trim() === '') {
            return { success: false, message: '–ò–º—è –∫–æ–ø–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' };
        }

        const trimmedNewName = newName.trim();

        if (!userPresets[sourceName]) {
            return { success: false, message: '–ò—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        if (userPresets[trimmedNewName]) {
            return { success: false, message: '–°—Ç–æ–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' };
        }

        // –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é
        userPresets[trimmedNewName] = JSON.parse(JSON.stringify(userPresets[sourceName]));
        savePresets();

        console.log(`–°—Ç–æ–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: "${sourceName}" ‚Üí "${trimmedNewName}"`);
        return { success: true, message: `–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è "${trimmedNewName}"` };
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    function getAllTablesInfo() {
        const tables = {};

        Object.keys(userPresets).forEach(tableName => {
            const isBuiltIn = TABLE_PRESETS.hasOwnProperty(tableName);
            const mappingsCount = Object.keys(userPresets[tableName]).length;
            const isModified = isBuiltIn ?
                JSON.stringify(TABLE_PRESETS[tableName]) !== JSON.stringify(userPresets[tableName]) :
                false;

            tables[tableName] = {
                isBuiltIn,
                mappingsCount,
                isModified,
                isActive: tableName === currentPreset
            };
        });

        return tables;
    }

    // ========== –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ó–í–ê–ù–ò–ô –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô (–£–õ–£–ß–®–ï–ù–û) ==========

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
    // –¢–µ–ø–µ—Ä—å –∏—â–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞ –í–ù–£–¢–†–ò –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    function findMappingByLocationName(fullDirection, mappings) {
        if (!fullDirection || !mappings) {
            console.log('üîç –ü–æ–∏—Å–∫: –ø—É—Å—Ç–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –º–∞–ø–ø–∏–Ω–≥–∏');
            return null;
        }

        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π...');
        console.log('üìç –ü–æ–ª–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', `"${fullDirection}"`);

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        const normalizedDirection = fullDirection.toLowerCase().trim();

        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞ –≤ –ø–æ–ª–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        for (const [mappingKey, mappingValue] of Object.entries(mappings)) {
            const normalizedKey = mappingKey.toLowerCase().trim();

            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: "${mappingKey}" ‚Üí "${mappingValue}"`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞ –≤ –ø–æ–ª–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            if (normalizedDirection.includes(normalizedKey)) {
                console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: "${mappingKey}" —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ "${fullDirection}"`);
                console.log(`üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${mappingValue}`);
                return mappingValue;
            }
        }

        console.log('üîç –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ...');

        // –ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ (–±–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ–∏—Å–∫)
        for (const [mappingKey, mappingValue] of Object.entries(mappings)) {
            const normalizedKey = mappingKey.toLowerCase().trim();

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –∏ –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            const keyWords = normalizedKey.split(/\s+/);
            const directionWords = normalizedDirection.split(/\s+/);

            // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–∑ –∫–ª—é—á–∞ –µ—Å—Ç—å –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            let hasPartialMatch = false;
            for (const keyWord of keyWords) {
                if (keyWord.length >= 3) { // –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                    for (const dirWord of directionWords) {
                        if (dirWord.includes(keyWord) || keyWord.includes(dirWord)) {
                            hasPartialMatch = true;
                            break;
                        }
                    }
                }
                if (hasPartialMatch) break;
            }

            if (hasPartialMatch) {
                console.log(`üîç –ù–ê–ô–î–ï–ù–û –ß–ê–°–¢–ò–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: "${mappingKey}" ~ "${fullDirection}"`);
                console.log(`üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${mappingValue}`);
                return mappingValue;
            }
        }

        console.log('‚ùå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏:', Object.keys(mappings));
        return null;
    }

    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è (–∫–∞–∫ fallback)
    function extractLocationName(fullDirection) {
        if (!fullDirection) return null;

        // –£–±–∏—Ä–∞–µ–º –∫–æ–¥ –≤ —Å–∫–æ–±–∫–∞—Ö –≤ –Ω–∞—á–∞–ª–µ: (–ê-12) –∏–ª–∏ (–ë-15) –∏ —Ç.–¥.
        let cleaned = fullDirection.replace(/^\([^)]+\)\s*/, '');

        // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –≤ –∫–æ–Ω—Ü–µ: ---123--- –∏–ª–∏ --456-- –∏ —Ç.–¥.
        cleaned = cleaned.replace(/---.*$/, '');
        cleaned = cleaned.replace(/--.*$/, '');

        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned = cleaned.trim();

        return cleaned || null;
    }

    // ========== –†–ê–ë–û–¢–ê –° –ü–†–ï–°–ï–¢–ê–ú–ò ==========

    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
    function switchToPreset(presetName) {
        if (userPresets[presetName]) {
            currentPreset = presetName;
            saveSettings();
            console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø—Ä–µ—Å–µ—Ç: ${presetName}`);
            return true;
        }
        return false;
    }

    // –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–µ—Å–µ—Ç–µ (–ø–æ –±—É–∫–≤–µ–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é)
    function addMappingToCurrentPreset(locationName, container) {
        if (!userPresets[currentPreset]) {
            userPresets[currentPreset] = {};
        }
        userPresets[currentPreset][locationName] = container;
        savePresets();
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ ${currentPreset}: "${locationName}" ‚Üí ${container}`);
    }

    // –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
    function removeMappingFromCurrentPreset(locationName) {
        if (userPresets[currentPreset] && userPresets[currentPreset][locationName]) {
            delete userPresets[currentPreset][locationName];
            savePresets();
            console.log(`–£–¥–∞–ª–µ–Ω–æ –∏–∑ ${currentPreset}: "${locationName}"`);
            return true;
        }
        return false;
    }

    // –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ—Å–µ—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    function resetPresetToDefault(presetName) {
        if (TABLE_PRESETS[presetName]) {
            userPresets[presetName] = JSON.parse(JSON.stringify(TABLE_PRESETS[presetName]));
            savePresets();
            console.log(`–ü—Ä–µ—Å–µ—Ç ${presetName} —Å–±—Ä–æ—à–µ–Ω –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é`);
            return true;
        }
        return false;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ—Å–µ—Ç–∞—Ö
    function getPresetsInfo() {
        const info = {};
        Object.keys(userPresets).forEach(presetName => {
            const isBuiltIn = TABLE_PRESETS.hasOwnProperty(presetName);
            const originalCount = isBuiltIn ? Object.keys(TABLE_PRESETS[presetName]).length : 0;
            const currentCount = Object.keys(userPresets[presetName]).length;
            const isModified = isBuiltIn ?
                JSON.stringify(TABLE_PRESETS[presetName]) !== JSON.stringify(userPresets[presetName]) :
                false;

            info[presetName] = {
                isBuiltIn,
                original: originalCount,
                current: currentCount,
                isModified
            };
        });
        return info;
    }

    // ========== CSS –°–¢–ò–õ–ò ==========

    // –î–æ–±–∞–≤–∏—Ç—å CSS —Å—Ç–∏–ª–∏ –≤ head
    function injectCSS() {
        const styleId = 'wms-override-styles';

        // –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingStyle = document.getElementById(styleId);
        if (existingStyle) {
            existingStyle.remove();
        }

        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
            .wms-large-container {
                font-size: ${LARGE_FONT_SIZE} !important;
                font-weight: bold !important;
                color: #2c3e50 !important;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3) !important;
                line-height: 1.2 !important;
                font-family: Arial, sans-serif !important;
            }

            .wms-highlight {
                background-color: #e8f5e8 !important;
                border: 3px solid #4CAF50 !important;
                transition: all 0.3s ease !important;
                border-radius: 4px !important;
                padding: 2px 4px !important;
            }

            .wms-tab-button {
                background: #f0f0f0;
                border: 1px solid #ddd;
                padding: 8px 12px;
                margin: 2px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 11px;
                transition: all 0.2s ease;
            }

            .wms-tab-button:hover {
                background: #e0e0e0;
            }

            .wms-tab-button.active {
                background: #4CAF50;
                color: white;
                border-color: #4CAF50;
            }

            .wms-section {
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 10px;
                margin-bottom: 10px;
                background: #f8f9fa;
            }
        `;

        document.head.appendChild(style);
        console.log('‚ú® CSS —Å—Ç–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞:', LARGE_FONT_SIZE);
    }

    // ========== –†–ê–ë–û–¢–ê –° XPATH ==========

    // –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ XPath —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    function getElementByXPath(xpath, useCache = true) {
        const now = Date.now();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (useCache && cachedElements.lastUpdate > 0 && (now - cachedElements.lastUpdate) < CACHE_LIFETIME) {
            if (xpath === DIRECTION_XPATH && cachedElements.direction) {
                return cachedElements.direction;
            }
            if (xpath === CONTAINER_XPATH_1 && cachedElements.container1) {
                return cachedElements.container1;
            }
            if (xpath === CONTAINER_XPATH_2 && cachedElements.container2) {
                return cachedElements.container2;
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
        const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
        const element = result.singleNodeValue;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        if (element) {
            if (xpath === DIRECTION_XPATH) cachedElements.direction = element;
            if (xpath === CONTAINER_XPATH_1) cachedElements.container1 = element;
            if (xpath === CONTAINER_XPATH_2) cachedElements.container2 = element;
            cachedElements.lastUpdate = now;
        }

        return element;
    }

    // –°–±—Ä–æ—Å –∫—ç—à–∞
    function clearElementCache() {
        cachedElements = {
            direction: null,
            container1: null,
            container2: null,
            lastUpdate: 0
        };
        console.log('üóëÔ∏è –ö—ç—à —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω');
    }

    // ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    function getCurrentDirection(useCache = true) {
        const directionElement = getElementByXPath(DIRECTION_XPATH, useCache);
        return directionElement ? directionElement.textContent.trim() : null;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞ –≤ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    function applyLargeFontToContainer1() {
        const containerElement1 = getElementByXPath(CONTAINER_XPATH_1);
        if (containerElement1) {
            // –£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            containerElement1.classList.remove('wms-large-container');

            // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å —Å –±–æ–ª—å—à–∏–º —à—Ä–∏—Ñ—Ç–æ–º
            containerElement1.classList.add('wms-large-container');

            console.log('‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω CSS –∫–ª–∞—Å—Å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É 1');
            console.log('–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:', LARGE_FONT_SIZE);
            console.log('–ö–ª–∞—Å—Å—ã —ç–ª–µ–º–µ–Ω—Ç–∞:', containerElement1.className);

            return true;
        } else {
            console.warn('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1 –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ XPath:', CONTAINER_XPATH_1);
            return false;
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –æ–±–∞ –ø–æ–ª—è
    function setContainer(newContainer) {
        console.log(`üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${newContainer}`);

        const containers = [
            { xpath: CONTAINER_XPATH_1, name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1' },
            { xpath: CONTAINER_XPATH_2, name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 2' }
        ];

        let successCount = 0;
        containers.forEach(container => {
            const element = getElementByXPath(container.xpath);
            if (element) {
                const containerValue = newContainer;
                element.textContent = containerValue;
                element.classList.add('wms-highlight');

                console.log(`‚úÖ ${container.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${containerValue}`);
                successCount++;
            } else {
                console.warn(`‚ùå ${container.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${container.xpath}`);
            }
        });

        if (successCount > 0) {
            // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –∫ –ø–µ—Ä–≤–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            setTimeout(() => {
                applyLargeFontToContainer1();
            }, 100);

            console.log(`‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ${successCount} –ø–æ–ª—è—Ö: ${newContainer}`);
            return true;
        }
        return false;
    }

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–º–µ–Ω—ã
    function checkAndReplace(forced = false) {
        const currentDirection = getCurrentDirection(!forced);
        const currentMappings = getCurrentMappings();

        console.log('üîÑ === –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò ===');
        console.log('üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:', currentDirection || '–ù–ï –ù–ê–ô–î–ï–ù–û');
        console.log('üìã –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç:', currentPreset);
        console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–ø–ø–∏–Ω–≥–æ–≤:', Object.keys(currentMappings).length);

        if (currentDirection) {
            // –ù–û–í–´–ô –ü–û–î–•–û–î: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–æ–ª–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            let newContainer = findMappingByLocationName(currentDirection, currentMappings);

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥ (fallback)
            if (!newContainer) {
                console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è...');
                const locationName = extractLocationName(currentDirection);
                console.log(`üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${locationName}"`);

                if (locationName) {
                    newContainer = findMappingByLocationName(locationName, currentMappings);
                }
            }

            if (newContainer) {
                // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                const containerElement1 = getElementByXPath(CONTAINER_XPATH_1, !forced);
                const containerElement2 = getElementByXPath(CONTAINER_XPATH_2, !forced);

                const currentContainer1 = containerElement1 ? containerElement1.textContent.trim() : '';
                const currentContainer2 = containerElement2 ? containerElement2.textContent.trim() : '';

                if (currentContainer1 !== newContainer || currentContainer2 !== newContainer) {
                    console.log(`üöÄ –ù–ê–ô–î–ï–ù –ö–û–ù–¢–ï–ô–ù–ï–†: ${newContainer}`);
                    console.log('üíæ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...');
                    setContainer(newContainer);
                    console.log('üîÑ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –£–°–ü–ï–®–ù–û ===');
                    return true;
                } else {
                    console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
                }
            } else {
                console.log('‚ùå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                if (forced) {
                    console.log('üìã –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞–ø–ø–∏–Ω–≥–∏:');
                    console.log(`   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: "${currentDirection}"`);
                    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª: "${currentPreset}"`);
                }
            }
        } else {
            console.log('‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        }

        console.log('üîÑ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===');
        return false;
    }

    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
    function quickCheck() {
        const currentDirection = getCurrentDirection(true);
        const currentMappings = getCurrentMappings();

        if (currentDirection) {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫
            let newContainer = findMappingByLocationName(currentDirection, currentMappings);

            // –ü–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
            if (!newContainer) {
                const locationName = extractLocationName(currentDirection);
                if (locationName) {
                    newContainer = findMappingByLocationName(locationName, currentMappings);
                }
            }

            if (newContainer) {
                const containerElement1 = getElementByXPath(CONTAINER_XPATH_1, true);

                if (containerElement1) {
                    const currentContainer = containerElement1.textContent.trim();
                    if (currentContainer !== newContainer) {
                        return checkAndReplace(false);
                    }
                }
            }
        }
        return false;
    }

    // ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê (—Å–∫—Ä—ã—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è) ==========

    function diagnoseElements() {
        console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–õ–ï–ú–ï–ù–¢–û–í ===');

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ—Å–µ—Ç–∞—Ö
        console.log('–¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç:', currentPreset);
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–µ—Å–µ—Ç–µ:', Object.keys(getCurrentMappings()).length);
        console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –ø—Ä–µ—Å–µ—Ç–∞—Ö:', getPresetsInfo());

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const directionElement = getElementByXPath(DIRECTION_XPATH);
        const fullDirection = directionElement ? directionElement.textContent.trim() : null;
        const locationName = extractLocationName(fullDirection);

        console.log('–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', directionElement);
        console.log('–ü–æ–ª–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', fullDirection || '–ù–ï –ù–ê–ô–î–ï–ù–û');
        console.log('–ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', locationName || '–ù–ï –ò–ó–í–õ–ï–ß–ï–ù–û');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        if (fullDirection) {
            const currentMappings = getCurrentMappings();
            console.log('=== –¢–ï–°–¢ –ü–û–ò–°–ö–ê ===');
            const foundContainer = findMappingByLocationName(fullDirection, currentMappings);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', foundContainer || '–ù–ï–¢ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        const containerElement1 = getElementByXPath(CONTAINER_XPATH_1);
        const containerElement2 = getElementByXPath(CONTAINER_XPATH_2);

        console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1:', containerElement1);
        console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1 —Ç–µ–∫—Å—Ç:', containerElement1 ? containerElement1.textContent : '–ù–ï –ù–ê–ô–î–ï–ù–û');
        console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1 –∫–ª–∞—Å—Å—ã:', containerElement1 ? containerElement1.className : '–ù–ï–¢');
        console.log('–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:', LARGE_FONT_SIZE);

        console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 2:', containerElement2);
        console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 2 —Ç–µ–∫—Å—Ç:', containerElement2 ? containerElement2.textContent : '–ù–ï –ù–ê–ô–î–ï–ù–û');

        // –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('--- –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---');
        const h1Elements = document.querySelectorAll('h1');
        console.log('–ù–∞–π–¥–µ–Ω–æ H1 —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', h1Elements.length);

        const bElements = document.querySelectorAll('b');
        console.log('–ù–∞–π–¥–µ–Ω–æ B —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', bElements.length);
        bElements.forEach((el, i) => {
            if (el.textContent.includes('–î—ã–±–µ–Ω–∫–æ') || el.textContent.includes('156-157')) {
                console.log(`B[${i}] (–°–û–í–ü–ê–î–ï–ù–ò–ï):`, el.textContent);
            }
        });
    }

    // ========== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==========

    function showNotification(message, type = 'info') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GM_notification –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (typeof GM_notification !== 'undefined' && type !== 'error') {
            GM_notification({
                title: 'WMS Container Override',
                text: message,
                timeout: 4000
            });
            return;
        }
        
        // Fallback –∫ –æ–±—ã—á–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
            color: white;
            border-radius: 5px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000;
            font-family: Arial, sans-serif;
            font-size: 14px;
            max-width: 350px;
            word-wrap: break-word;
        `;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, type === 'error' ? 6000 : 4000);
    }

    // ========== –ò–ù–¢–ï–†–§–ï–ô–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø ==========

    function createControlPanel() {
        const panel = document.createElement('div');
        panel.id = 'wms-control-panel';
        panel.style.cssText = `
            position: fixed;
            top: 10px;
            left: 10px;
            background: white;
            border: 2px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            z-index: 9999;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            font-family: Arial, sans-serif;
            font-size: 12px;
            max-width: 500px;
            max-height: 80vh;
            overflow-y: auto;
            display: none;
        `;

        const tablesInfo = getAllTablesInfo();
        const tablesSelectOptions = Object.keys(tablesInfo).map(tableName => {
            const info = tablesInfo[tableName];
            const suffix = info.isBuiltIn ? (info.isModified ? ' (–∏–∑–º–µ–Ω–µ–Ω)' : ' (–±–∞–∑–æ–≤—ã–π)') : ' (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π)';
            return `<option value="${tableName}">${tableName} (${info.mappingsCount})${suffix}</option>`;
        }).join('');

        panel.innerHTML = `
            <div style="margin-bottom: 10px; font-weight: bold; color: #333;">
                üöÄ WMS Container Override Enhanced v${CURRENT_VERSION}
            </div>

            <div style="margin-bottom: 15px; font-size: 11px; color: #666;">
                –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ + —Ä—É—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–æ–ª—ã
            </div>

            <!-- –¢–∞–±—ã -->
            <div style="margin-bottom: 15px; border-bottom: 1px solid #ddd;">
                <button class="wms-tab-button active" data-tab="main">–û—Å–Ω–æ–≤–Ω–æ–µ</button>
                <button class="wms-tab-button" data-tab="tables">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∞–º–∏</button>
                <button class="wms-tab-button" data-tab="mappings">–ú–∞–ø–ø–∏–Ω–≥–∏</button>
                <button class="wms-tab-button" data-tab="updates">–û–±–Ω–æ–≤–ª–µ–Ω–∏—è</button>
            </div>

            <!-- –û—Å–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ -->
            <div id="wms-tab-main" class="wms-tab-content">
                <div class="wms-section">
                    <div style="font-weight: bold; margin-bottom: 8px; color: #333;">
                        üéØ –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª: <span style="color: #FF5722;">${currentPreset}</span>
                    </div>
                    <div style="display: flex; gap: 5px; align-items: center; margin-bottom: 8px;">
                        <select id="wms-table-preset" style="flex: 1; padding: 5px; border: 1px solid #ddd; border-radius: 3px; font-size: 11px;">
                            <option value="">-- –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å—Ç–æ–ª --</option>
                            ${tablesSelectOptions}
                        </select>
                        <button id="wms-switch-preset" style="padding: 5px 10px; background: #FF5722; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;">
                            –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å
                        </button>
                    </div>
                </div>

                <div class="wms-section">
                    <label style="display: block; margin-bottom: 5px; font-weight: bold;">–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (px):</label>
                    <div style="display: flex; gap: 5px; align-items: center;">
                        <input type="number" id="wms-font-size-input" value="${parseInt(LARGE_FONT_SIZE)}" min="12" max="100" style="width: 80px; padding: 5px; border: 1px solid #ddd; border-radius: 3px;">
                        <span style="font-size: 11px; color: #666;">px</span>
                        <button id="wms-apply-font-size" style="padding: 5px 10px; background: #9C27B0; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;">
                            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                        </button>
                    </div>
                    <div style="font-size: 10px; color: #888; margin-top: 2px;" class="current-font-size">–¢–µ–∫—É—â–∏–π: ${LARGE_FONT_SIZE}</div>
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 5px; margin-bottom: 15px;">
                    <button id="wms-test-now" style="padding: 8px 12px; background: #2196F3; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;">
                        üîç –¢–µ—Å—Ç —Å–µ–π—á–∞—Å
                    </button>
                    <button id="wms-diagnose" style="padding: 8px 12px; background: #607D8B; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;">
                        üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    </button>
                </div>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–∞–º–∏ -->
            <div id="wms-tab-tables" class="wms-tab-content" style="display: none;">
                <div class="wms-section">
                    <div style="font-weight: bold; margin-bottom: 10px;">üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–æ–ª</div>
                    <div style="display: flex; gap: 5px; margin-bottom: 10px;">
                        <input type="text" id="wms-new-table-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞" style="flex: 1; padding: 5px; border: 1px solid #ddd; border-radius: 3px;">
                        <button id="wms-create-table" style="padding: 5px 10px; background: #4CAF50; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;">
                            –°–æ–∑–¥–∞—Ç—å
                        </button>
                    </div>
                </div>

                <div class="wms-section">
                    <div style="font-weight: bold; margin-bottom: 10px;">üìã –í—Å–µ —Å—Ç–æ–ª—ã</div>
                    <div id="wms-tables-list" style="max-height: 300px; overflow-y: auto;"></div>
                </div>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∞ –º–∞–ø–ø–∏–Ω–≥–æ–≤ -->
            <div id="wms-tab-mappings" class="wms-tab-content" style="display: none;">
                <div class="wms-section">
                    <div style="font-weight: bold; margin-bottom: 10px;">
                        –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ ${currentPreset}:
                        <span id="wms-mappings-count" style="color: #666; font-weight: normal;">(${Object.keys(getCurrentMappings()).length})</span>
                    </div>

                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 5px;">–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ):</label>
                        <input type="text" id="wms-direction-input" style="width: 100%; padding: 5px; border: 1px solid #ddd; border-radius: 3px; margin-bottom: 5px;" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î—ã–±–µ–Ω–∫–æ">
                        <label style="display: block; margin-bottom: 5px;">–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:</label>
                        <input type="text" id="wms-container-input" style="width: 100%; padding: 5px; border: 1px solid #ddd; border-radius: 3px; margin-bottom: 10px;" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2---–î—ã–±–µ–Ω–∫–æ">
                        <button id="wms-add-mapping" style="width: 100%; padding: 8px 12px; background: #4CAF50; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;">
                            –î–æ–±–∞–≤–∏—Ç—å –≤ ${currentPreset}
                        </button>
                        <div style="font-size: 10px; color: #888; margin-top: 5px;">
                            üìù –ò–∑ "(–ë-12) –î—ã–±–µ–Ω–∫–æ---156-157---" –±–µ—Ä–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ "–î—ã–±–µ–Ω–∫–æ"
                        </div>
                    </div>

                    <div style="display: flex; gap: 5px; margin-bottom: 10px;">
                        <button id="wms-reset-preset" style="flex: 1; padding: 4px 8px; background: #9E9E9E; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 10px;">
                            –°–±—Ä–æ—Å–∏—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É
                        </button>
                        <button id="wms-copy-preset" style="flex: 1; padding: 4px 8px; background: #607D8B; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 10px;">
                            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä
                        </button>
                    </div>

                    <div id="wms-mappings-list" style="max-height: 200px; overflow-y: auto; border: 1px solid #eee; padding: 5px; background: #f9f9f9;"></div>
                </div>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π -->
            <div id="wms-tab-updates" class="wms-tab-content" style="display: none;">
                <div class="wms-section">
                    <div style="font-weight: bold; margin-bottom: 15px; color: #333;">üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞</div>
                    
                    <div style="margin-bottom: 15px;">
                        <button id="wms-open-update" style="width: 100%; padding: 12px; background: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; font-weight: bold;">
                            üöÄ –û–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
                        </button>
                    </div>
                    
                    <div style="margin-bottom: 15px;">
                        <button onclick="window.open('${UPDATE_CONFIG.GITHUB_REPO}')" style="width: 100%; padding: 8px; background: #333; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 12px;">
                            üìÅ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                        </button>
                    </div>
                    
                    <div style="font-size: 11px; color: #666; line-height: 1.4; margin-bottom: 10px;">
                        <strong>–í–µ—Ä—Å–∏—è:</strong> ${CURRENT_VERSION}<br>
                        <strong>–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> GitHub ‚Üí Tampermonkey<br>
                        <strong>–¢–∏–ø:</strong> –†—É—á–Ω—ã–µ (–ø–æ –∫–Ω–æ–ø–∫–µ)
                    </div>
                    
                    <div style="padding: 10px; background: #e8f5e8; border-radius: 4px; font-size: 11px; color: #2e7d32;">
                        ‚úÖ <strong>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong> –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ GitHub. Tampermonkey –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
                    </div>
                </div>
            </div>

            <div style="margin-top: 15px; text-align: center; padding-top: 10px; border-top: 1px solid #ddd;">
                <button id="wms-close-panel" style="padding: 5px 15px; background: #666; color: white; border: none; border-radius: 3px; cursor: pointer;">
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        `;

        document.body.appendChild(panel);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–±–æ–≤
        panel.querySelectorAll('.wms-tab-button').forEach(button => {
            button.addEventListener('click', function() {
                const tabName = this.dataset.tab;

                // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                panel.querySelectorAll('.wms-tab-button').forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');

                // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                panel.querySelectorAll('.wms-tab-content').forEach(content => content.style.display = 'none');
                const targetContent = panel.querySelector(`#wms-tab-${tabName}`);
                if (targetContent) {
                    targetContent.style.display = 'block';
                }
            });
        });

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...
        setupPanelEventHandlers(panel);

        updateMappingsList();
        updateTablesList();
    }

    function setupPanelEventHandlers(panel) {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
        document.getElementById('wms-switch-preset').addEventListener('click', function() {
            const selectedTable = document.getElementById('wms-table-preset').value;
            if (selectedTable) {
                const success = switchToPreset(selectedTable);
                if (success) {
                    panel.style.display = 'none';
                    createControlPanel();
                    document.getElementById('wms-control-panel').style.display = 'block';
                    showNotification(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ "${selectedTable}" —Å ${Object.keys(getCurrentMappings()).length} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏`, 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞', 'error');
                }
            } else {
                showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è', 'error');
            }
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
        document.getElementById('wms-create-table').addEventListener('click', function() {
            const tableName = document.getElementById('wms-new-table-name').value.trim();
            const result = createCustomTable(tableName);

            if (result.success) {
                document.getElementById('wms-new-table-name').value = '';
                updateTablesList();
                showNotification(result.message, 'success');
            } else {
                showNotification(result.message, 'error');
            }
        });

        // –ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        document.getElementById('wms-open-update').addEventListener('click', function() {
            openUpdateLink();
        });

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
        document.getElementById('wms-reset-preset').addEventListener('click', function() {
            if (confirm(`–°–±—Ä–æ—Å–∏—Ç—å "${currentPreset}" –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é? –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!`)) {
                const success = resetPresetToDefault(currentPreset);
                if (success) {
                    panel.style.display = 'none';
                    createControlPanel();
                    document.getElementById('wms-control-panel').style.display = 'block';
                    showNotification(`"${currentPreset}" —Å–±—Ä–æ—à–µ–Ω –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é`, 'success');
                } else {
                    showNotification('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–µ—Å–µ—Ç–∞', 'error');
                }
            }
        });

        document.getElementById('wms-copy-preset').addEventListener('click', function() {
            const currentMappings = getCurrentMappings();
            const jsonText = JSON.stringify(currentMappings, null, 2);
            navigator.clipboard.writeText(jsonText).then(() => {
                showNotification(`–ü—Ä–µ—Å–µ—Ç "${currentPreset}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`, 'success');
            }).catch(() => {
                console.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç–∞:', jsonText);
                showNotification('–î–∞–Ω–Ω—ã–µ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å (–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)', 'info');
            });
        });

        document.getElementById('wms-add-mapping').addEventListener('click', function() {
            const locationName = document.getElementById('wms-direction-input').value.trim();
            const container = document.getElementById('wms-container-input').value.trim();

            if (locationName && container) {
                addMappingToCurrentPreset(locationName, container);
                updateMappingsList();
                updateMappingsCount();

                document.getElementById('wms-direction-input').value = '';
                document.getElementById('wms-container-input').value = '';

                showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ "${currentPreset}": "${locationName}" ‚Üí ${container}`, 'success');
            } else {
                showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è', 'error');
            }
        });

        document.getElementById('wms-test-now').addEventListener('click', function() {
            clearElementCache();
            const result = checkAndReplace(true);
            showNotification(result ? '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –Ω–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è!' : '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç', 'info');
        });

        document.getElementById('wms-diagnose').addEventListener('click', function() {
            diagnoseElements();
            showNotification('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å)', 'info');
        });

        document.getElementById('wms-apply-font-size').addEventListener('click', function() {
            const newSize = document.getElementById('wms-font-size-input').value;
            if (newSize && newSize >= 12 && newSize <= 100) {
                LARGE_FONT_SIZE = newSize + 'px';
                saveSettings();
                injectCSS();
                applyLargeFontToContainer1();
                document.querySelector('#wms-control-panel .current-font-size').textContent = `–¢–µ–∫—É—â–∏–π: ${LARGE_FONT_SIZE}`;
                showNotification(`–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${LARGE_FONT_SIZE}`, 'success');
            } else {
                showNotification('–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 12 –¥–æ 100 –ø–∏–∫—Å–µ–ª–µ–π', 'error');
            }
        });

        document.getElementById('wms-close-panel').addEventListener('click', function() {
            panel.style.display = 'none';
        });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤
    function updateTablesList() {
        const listElement = document.getElementById('wms-tables-list');
        if (!listElement) return;

        listElement.innerHTML = '';
        const tablesInfo = getAllTablesInfo();

        for (const [tableName, info] of Object.entries(tablesInfo)) {
            const item = document.createElement('div');
            item.style.cssText = 'margin-bottom: 10px; padding: 10px; background: white; border-radius: 5px; border: 1px solid #ddd;';

            const typeLabel = info.isBuiltIn ? 'üè≠ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π' : 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π';
            const activeLabel = info.isActive ? ' (–ê–ö–¢–ò–í–ù–´–ô)' : '';
            const modifiedLabel = info.isModified ? ' (–∏–∑–º–µ–Ω–µ–Ω)' : '';

            item.innerHTML = `
                <div style="font-weight: bold; margin-bottom: 5px; color: ${info.isActive ? '#FF5722' : '#333'};">
                    ${tableName}${activeLabel}
                </div>
                <div style="font-size: 11px; color: #666; margin-bottom: 8px;">
                    ${typeLabel} ‚Ä¢ ${info.mappingsCount} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π${modifiedLabel}
                </div>
                <div style="display: flex; gap: 5px; flex-wrap: wrap;">
                    ${!info.isActive ? `<button onclick="switchTableFromList('${tableName}')" style="padding: 3px 8px; background: #2196F3; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 10px;">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</button>` : ''}
                    <button onclick="copyTableFromList('${tableName}')" style="padding: 3px 8px; background: #607D8B; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 10px;">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                    ${!info.isBuiltIn ? `<button onclick="renameTableFromList('${tableName}')" style="padding: 3px 8px; background: #FF9800; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 10px;">–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å</button>` : ''}
                    ${!info.isBuiltIn ? `<button onclick="deleteTableFromList('${tableName}')" style="padding: 3px 8px; background: #f44336; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 10px;">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
                    ${info.isBuiltIn && info.isModified ? `<button onclick="resetTableFromList('${tableName}')" style="padding: 3px 8px; background: #9E9E9E; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 10px;">–°–±—Ä–æ—Å–∏—Ç—å</button>` : ''}
                </div>
            `;

            listElement.appendChild(item);
        }
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    window.switchTableFromList = function(tableName) {
        const success = switchToPreset(tableName);
        if (success) {
            const panel = document.getElementById('wms-control-panel');
            panel.style.display = 'none';
            createControlPanel();
            document.getElementById('wms-control-panel').style.display = 'block';
            showNotification(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ "${tableName}"`, 'success');
        }
    };

    window.copyTableFromList = function(tableName) {
        const newName = prompt(`–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏–∏ —Å—Ç–æ–ª–∞ "${tableName}":`);
        if (newName) {
            const result = copyTable(tableName, newName);
            if (result.success) {
                updateTablesList();
                showNotification(result.message, 'success');
            } else {
                showNotification(result.message, 'error');
            }
        }
    };

    window.renameTableFromList = function(tableName) {
        const newName = prompt(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–∞ "${tableName}":`);
        if (newName) {
            const result = renameTable(tableName, newName);
            if (result.success) {
                updateTablesList();
                const panel = document.getElementById('wms-control-panel');
                if (currentPreset === newName) {
                    // –ï—Å–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    panel.style.display = 'none';
                    createControlPanel();
                    document.getElementById('wms-control-panel').style.display = 'block';
                }
                showNotification(result.message, 'success');
            } else {
                showNotification(result.message, 'error');
            }
        }
    };

    window.deleteTableFromList = function(tableName) {
        if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª "${tableName}" —Å–æ –≤—Å–µ–º–∏ –º–∞–ø–ø–∏–Ω–≥–∞–º–∏?`)) {
            const result = deleteCustomTable(tableName);
            if (result.success) {
                updateTablesList();
                const panel = document.getElementById('wms-control-panel');
                if (currentPreset !== tableName) {
                    updateTablesList(); // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                } else {
                    // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª, –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å—Ç–æ–ª 18, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    panel.style.display = 'none';
                    createControlPanel();
                    document.getElementById('wms-control-panel').style.display = 'block';
                }
                showNotification(result.message, 'success');
            } else {
                showNotification(result.message, 'error');
            }
        }
    };

    window.resetTableFromList = function(tableName) {
        if (confirm(`–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–æ–ª "${tableName}" –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é?`)) {
            const success = resetPresetToDefault(tableName);
            if (success) {
                updateTablesList();
                if (currentPreset === tableName) {
                    updateMappingsList();
                    updateMappingsCount();
                }
                showNotification(`–°—Ç–æ–ª "${tableName}" —Å–±—Ä–æ—à–µ–Ω`, 'success');
            }
        }
    };

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –º–∞–ø–ø–∏–Ω–≥–æ–≤
    function updateMappingsCount() {
        const countElement = document.getElementById('wms-mappings-count');
        if (countElement) {
            countElement.textContent = `(${Object.keys(getCurrentMappings()).length})`;
        }
    }

    function updateMappingsList() {
        const listElement = document.getElementById('wms-mappings-list');
        if (listElement) {
            listElement.innerHTML = '';
            const currentMappings = getCurrentMappings();

            for (const [locationName, container] of Object.entries(currentMappings)) {
                const item = document.createElement('div');
                item.style.cssText = 'margin-bottom: 8px; padding: 5px; background: white; border-radius: 3px; font-size: 11px; position: relative;';

                const locationDiv = document.createElement('div');
                locationDiv.style.cssText = 'font-weight: bold; color: #333; padding-right: 25px;';
                locationDiv.textContent = locationName;

                const containerDiv = document.createElement('div');
                containerDiv.style.cssText = 'color: #666;';
                containerDiv.textContent = `‚Üí ${container}`;

                const deleteBtn = document.createElement('button');
                deleteBtn.style.cssText = 'position: absolute; top: 5px; right: 5px; padding: 2px 6px; background: #f44336; color: white; border: none; border-radius: 2px; cursor: pointer; font-size: 10px;';
                deleteBtn.textContent = '√ó';
                deleteBtn.onclick = () => deleteMapping(locationName);

                item.appendChild(locationDiv);
                item.appendChild(containerDiv);
                item.appendChild(deleteBtn);
                listElement.appendChild(item);
            }
        }

        // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
        updateMappingsCount();
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
    window.deleteMapping = function(locationName) {
        const success = removeMappingFromCurrentPreset(locationName);
        if (success) {
            updateMappingsList();
            updateMappingsCount();
            showNotification(`–£–¥–∞–ª–µ–Ω–æ –∏–∑ "${currentPreset}": "${locationName}"`, 'info');
        }
    };

    // ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê–ú–ò ==========

    function startNormalMode() {
        if (normalCheckTimer) {
            clearInterval(normalCheckTimer);
        }

        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
        setTimeout(() => {
            applyLargeFontToContainer1();
        }, 500);

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (–∫–∞–∂–¥—ã–µ 500ms)
        normalCheckTimer = setInterval(() => {
            if (isEnabled) {
                quickCheck();
                applyLargeFontToContainer1(); // –ü–µ—Ä–µ–ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ä–∏—Ñ—Ç
            }
        }, CHECK_INTERVAL);

        console.log(`üöÄ –ó–∞–ø—É—â–µ–Ω –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∂–¥—ã–µ ${CHECK_INTERVAL}ms)`);
    }

    function startFastCheckMode() {
        if (fastCheckTimer) {
            clearInterval(fastCheckTimer);
        }

        fastCheckTimer = setInterval(() => {
            if (isEnabled) {
                quickCheck();
            }
        }, 100); // –£–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 100ms

        // –û—Ç–∫–ª—é—á–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (fastCheckTimer) {
                clearInterval(fastCheckTimer);
                fastCheckTimer = null;
                console.log('‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω');
            }
        }, 10000);

        console.log('‚ö° –ó–∞–ø—É—â–µ–Ω –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–æ–∫ (100ms –Ω–∞ 10 —Å–µ–∫)');
    }

    // ========== –ú–û–ù–ò–¢–û–†–ò–ù–ì DOM ==========

    function setupDOMObserver() {
        if (!window.MutationObserver) {
            console.warn('MutationObserver –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return;
        }

        const observer = new MutationObserver((mutations) => {
            if (!isEnabled) return;

            let shouldCheck = false;

            mutations.forEach((mutation) => {
                if (mutation.type === 'childList' || mutation.type === 'characterData') {
                    const target = mutation.target;

                    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç—è—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                    if (target.tagName === 'B' || target.tagName === 'H1' ||
                        target.closest('div[5]') || target.querySelector('b, h1')) {
                        shouldCheck = true;
                    }
                }
            });

            if (shouldCheck) {
                setTimeout(quickCheck, 50);
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true,
            characterData: true
        });

        console.log('üëÄ DOM Observer –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }

    // ========== –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò ==========

    function setupHotkeys() {
        document.addEventListener('keydown', function(e) {
            // Ctrl+Shift+W - –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if (e.ctrlKey && e.shiftKey && e.code === 'KeyW') {
                e.preventDefault();
                const panel = document.getElementById('wms-control-panel');
                if (panel) {
                    panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
                } else {
                    createControlPanel();
                    document.getElementById('wms-control-panel').style.display = 'block';
                }
            }

            // Ctrl+Shift+T - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
            if (e.ctrlKey && e.shiftKey && e.code === 'KeyT') {
                e.preventDefault();
                clearElementCache();
                checkAndReplace(true);
            }

            // Ctrl+Shift+F - –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à—Ä–∏—Ñ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            if (e.ctrlKey && e.shiftKey && e.code === 'KeyF') {
                e.preventDefault();
                applyLargeFontToContainer1();
                showNotification('–®—Ä–∏—Ñ—Ç –ø–µ—Ä–µ–ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ', 'info');
            }

            // Ctrl+Shift+D - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Å–∫—Ä—ã—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
            if (e.ctrlKey && e.shiftKey && e.code === 'KeyD') {
                e.preventDefault();
                diagnoseElements();
                showNotification('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å)', 'info');
            }

            // Ctrl+Shift+Q - —Ä–µ–∂–∏–º –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            if (e.ctrlKey && e.shiftKey && e.code === 'KeyQ') {
                e.preventDefault();
                startFastCheckMode();
                showNotification('–†–µ–∂–∏–º –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞–ø—É—â–µ–Ω!', 'info');
            }

            // Ctrl+Shift+U - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (e.ctrlKey && e.shiftKey && e.code === 'KeyU') {
                e.preventDefault();
                openUpdateLink();
            }
        });

        console.log('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
    }

    // ========== –ö–ù–û–ü–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø ==========

    function createToggleButton() {
        const button = document.createElement('button');
        button.id = 'wms-toggle-button';
        button.innerHTML = '‚öôÔ∏è';
        button.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: #4CAF50;
            color: white;
            border: none;
            font-size: 20px;
            cursor: pointer;
            z-index: 9998;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
        `;

        button.addEventListener('click', function() {
            const panel = document.getElementById('wms-control-panel');
            if (panel) {
                panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
            } else {
                createControlPanel();
                document.getElementById('wms-control-panel').style.display = 'block';
            }
        });

        button.addEventListener('mouseenter', function() {
            button.style.transform = 'scale(1.1)';
        });

        button.addEventListener('mouseleave', function() {
            button.style.transform = 'scale(1)';
        });

        document.body.appendChild(button);
    }

    // ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==========

    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    function initialize() {
        console.log('üöÄ WMS Container Override Enhanced v2.8 —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

        // –í–Ω–µ–¥—Ä–∏—Ç—å CSS —Å—Ç–∏–ª–∏
        injectCSS();

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        loadSettings();

        // –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        createToggleButton();

        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        setupHotkeys();

        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ DOM
        setupDOMObserver();

        // –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        startNormalMode();

        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        setTimeout(() => {
            checkAndReplace(true);
        }, 1000);

        showNotification(`WMS Override v${CURRENT_VERSION} —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∞–∫—Ç–∏–≤–µ–Ω! –°—Ç–æ–ª: "${currentPreset}" (${Object.keys(getCurrentMappings()).length} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)`, 'success');
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        setTimeout(initialize, 150);
    }

    // ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==========
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    window.wmsUpdate = () => openUpdateLink();
    window.wmsShowVersion = () => console.log(`WMS Container Override v${CURRENT_VERSION}`);
    
    console.log('‚úÖ WMS Container Override Enhanced v2.8 —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');

})();
